// DROP TABLE IF EXISTS overseer.rep5_1, overseer.rep5_2, overseer.rep5_3;
// CREATE TABLE overseer.rep5_1 (ddi char(7) NOT NULL default '', yearmonth char(6) NOT NULL default '', call_quantity decimal(11,0) default NULL, call_sumtime decimal(13,0) default NULL, allowed_call_quantity decimal(11,0) default NULL, allowed_call_sumtime decimal(13,0) default NULL) TYPE=MyISAM COMMENT='выборка по поступившим абонентам';
// CREATE TABLE overseer.rep5_2 (ddi char(7) NOT NULL default '', yearmonth char(6) NOT NULL default '', call_quantity decimal(11,0) default NULL, call_sumtime decimal(13,0) default NULL, allowed_call_quantity decimal(11,0) default NULL, allowed_call_sumtime decimal(13,0) default NULL) TYPE=MyISAM COMMENT='выборка по обслуженным абонентам';
// CREATE TABLE overseer.rep5_3 (ddi char(7) NOT NULL default '', yearmonth char(6) NOT NULL default '', call_quantity decimal(11,0) default NULL, call_sumtime decimal(13,0) default NULL, call_middletime decimal(13,2) default NULL, allowed_call_quantity decimal(11,0) default NULL, allowed_call_sumtime decimal(13,0) default NULL, allowed_call_middletime decimal(13,2) default NULL, nonallowed_call_percent decimal(5,2) default NULL) TYPE=MyISAM COMMENT='суммарная выборка';
// INSERT INTO overseer.rep5_1 SELECT ddi AS 'Номер услуги', '200904', COUNT(*) AS 'Количество поступивших звонков', SUM(dur) AS 'Общая продолжительность звонков', '' AS 'Количество обслуженных звонков', '' AS 'Общая продолжительность обслуженных звонков' FROM irda.irda_200904 WHERE ddi='109' GROUP BY ddi;
// INSERT INTO overseer.rep5_2 SELECT ddi AS 'Номер услуги', '200904', '' AS 'Количество поступивших звонков', '' AS 'Общая продолжительность звонков', COUNT(*) AS 'Количество обслуженных звонков', SUM(dur) AS 'Общая продолжительность обслуженных звонков' FROM irda.irda_200904 WHERE ddi='109' AND (dur>0) AND (v_mreza>'') AND (rm>0) GROUP BY ddi;
// INSERT INTO overseer.rep5_3 SELECT a.ddi AS 'Номер услуги', '200904', a.call_quantity AS 'Количество поступивших звонков', a.call_sumtime AS 'Общая продолжительность поступивших звонков', a.call_sumtime/a.call_quantity AS 'Среднее время поступившего звонка', b.allowed_call_quantity AS 'Количество обслуженных звонков', b.allowed_call_sumtime AS 'Общая продолжительность обслуженных звонков', b.allowed_call_sumtime/b.allowed_call_quantity AS 'Среднее время обслуженного звонка', (1-(b.allowed_call_quantity/a.call_quantity))*100 AS 'Процент отказов' FROM overseer.rep5_1 AS a, overseer.rep5_2 AS b WHERE a.ddi=b.ddi;
// SELECT RIGHT(yearmonth,2) AS f1, LEFT(yearmonth,4) AS f2, call_quantity AS f3, call_sumtime AS f4, allowed_call_quantity AS f5, allowed_call_sumtime AS f6, nonallowed_call_percent AS f7 FROM overseer.rep5 WHERE ddi='109' AND yearmonth='200904' ORDER BY yearmonth;

// const
// MyISAMExtentions: array [0..2] of String[3] = ('frm','MYD','MYI');
// var
// hInternetOpen, hInternetConnect: HINTERNET;
// dwError: DWORD;
// i: integer;
// s1, s2: WideString;
//
// hInternetOpen:=InternetOpen('Overseer', INTERNET_OPEN_TYPE_DIRECT, nil, nil, 0);
// if hInternetOpen=nil then
// GenerateError('Не удалось инициализировать соединение с сетью для дальнейшего получения доступа к FTP-серверу!',sErrorMessage,bError)
// else
// begin
// LogThis('Операция инициализации подключения к удалённому серверу выполнена успешно.',LogGroupGUID,lmtInfo);
// hInternetConnect:=InternetConnect(hInternetOpen,'10.1.1.2',INTERNET_DEFAULT_FTP_PORT,'root','kron',INTERNET_SERVICE_FTP,0,0); // INTERNET_FLAG_PASSIVE
// if hInternetConnect=nil then
// GenerateError('Не удалось установить подключение к FTP-серверу!',sErrorMessage,bError)
// else
// begin
// LogThis('Операция подключения к FTP-серверу выполнена успешно.',LogGroupGUID,lmtInfo);
// if not FtpSetCurrentDirectory(hInternetConnect,'shared_disk/usr/mysql32356/data//statistika/') then
// GenerateError('Не удалось перейти в нужный каталог на FTP-сервере!',sErrorMessage,bError)
// else
// begin
// LogThis('Операция перехода в нужный каталог на FTP-сервере выполнена успешно.',LogGroupGUID,lmtInfo);
// LogThis('Производится попытка копирования очередного файла с FTP-сервера...',LogGroupGUID,lmtInfo);
//
// for i:=0 to 2 do
// begin
// if not bError then
// begin
// s1:='ord_20090809.'+WideString(MyISAMExtentions[i]);
// s2:='\\STATSERVER\D$\mysql\data\ord\oldformat_ord_20090809.'+WideString(MyISAMExtentions[i]);
// if not FtpGetFile(hInternetConnect,PWideChar(s1),PWideChar(s2),False,0,FTP_TRANSFER_TYPE_BINARY or INTERNET_FLAG_RELOAD,0) then
// GenerateError('Не удалось скопировать файл `'+s1+'` с FTP-сервера!',sErrorMessage,bError)
// else LogThis('Операция копирования файла `'+s1+'` с FTP-сервера в каталог MySQL-сервера выполнена успешно.',LogGroupGUID,lmtInfo);
// end;
// end;
// end;
// if hInternetConnect<>nil then
// if not InternetCloseHandle(hInternetConnect) then
// GenerateError('Не закрыть подключение к FTP-серверу!',sErrorMessage,bError)
// else LogThis('Операция отключения от FTP-сервера выполнена успешно.',LogGroupGUID,lmtInfo);
// end;
// if hInternetOpen<>nil then
// if not InternetCloseHandle(hInternetOpen) then
// GenerateError('Не удалось закрыть сетевое подключение!',sErrorMessage,bError)
// else LogThis('Операция закрытия сетевого подключения выполнена успешно.',LogGroupGUID,lmtInfo);
// end;

// добавить сохранение лога в файл в случаях указанных в настройках
// дописать кусок в процедуре LogThis, в случае если не найдёна внешняя программа ведения протокола, включить внутренний лог и передавать сообщения в него
// переработать процедуру передачи лога и настройки с этим связаные
// добавить проверку подключения к MySQL-серверу на таймер и корректировать значение переменной bMySQLConnected конфигурационной записи
// добавить проверку выбранного периода на соответствие временным рамкам (чтобы период действия было меньше чем текущий момент)

// запрос на проверку количества записей за месяц по дням
// SELECT date_of_calls, COUNT(*) FROM overseer.rep1 WHERE date_of_calls BETWEEN '2009-07-01' AND '2009-07-31' GROUP BY date_of_calls;

// q:=string(mysql_error(Configuration.StatServer.hConnection))

// http://www.visit-x.net/rammstein/
// http://www.worktobejudged.com/strippause/peca.html
// http://www.ellatha.com/eve/WormholeSystemslist.asp

//procedure Show_StatisticForm;
//const
//  LogGroupGUID: string='{EBE8994F-7947-4E7A-B049-B00EDDD5D9BF}';
//  sModalWinName: string='формирования статистики';
//var
//  mr: TModalResult;
//  q, s, sStartDate, sStopDate: string;
//  i, j, k, l: integer;
//  ResultSet: PMYSQL_RES;
//  ResultRow: PMYSQL_ROW;
//  bError: boolean;
//  sIns, sMod, sDel, sRec: string;
//  iSumIns, iSumMod, iSumDel, iSumRec: integer;
//  HTML: WideString;
//  r: cardinal;
//  TempPathNameBuffer, TempFileNameBuffer: PChar;
//  Year, Month, Day: word;
//  dtNow: TDateTime;
//  iNextMonth, iNextMonthYear: integer;
//  Hour, Min, Sec, MSec: word;
//  slTemp: TStringList;
//  StatisticForm: TStatisticForm;
//begin
//  ProcedureHeader('Процедура открытия окна '+sModalWinName, LogGroupGUID, True, True);
//
//  bError:=False;
//  ResultSet:=nil;
//  TempPathNameBuffer:=nil;
//  TempFileNameBuffer:=nil;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  slTemp:=TStringList.Create;
//  try
//    StatisticForm:=TStatisticForm.Create(Owner);
//    with StatisticForm do
//      try
//        chklbxUsers.Clear;
//        ImageList2.GetIcon(ICON_STATISTIC, Icon);
//        // получение списка пользователей
//        LogThis('Получение списка пользователей...', LogGroupGUID, lmtInfo);
//        q:='SELECT DISTINCT usr_fullname FROM '+Configuration.sMySQLDatabase+'._usr WHERE usr_erased="0" ORDER BY usr_fullname;';
//        LogThis(q, LogGroupGUID, lmtSQL);
//        i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//        if i=0 then
//          begin
//            LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//            ResultSet:=mysql_store_result(MySQLConnectionHandler);
//            if ResultSet<>nil then
//              begin
//                LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                i:=mysql_num_rows(ResultSet);
//                if i>0 then
//                  begin
//                    LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                    ProgressBar1.Max:=i;
//                    for j:=0 to i-1 do
//                      begin
//                        LogThis('Получение очередной строки выборки ('+IntToStr(j)+').', LogGroupGUID, lmtInfo);
//                        ResultRow:=mysql_fetch_row(ResultSet);
//                        if ResultRow<>nil then
//                          begin
//                            LogThis('Операция получения очередной строки выборки ('+IntToStr(j)+') прошла успешно.', LogGroupGUID, lmtInfo);
//                            chklbxUsers.Items.Add(string(ResultRow[0]));
//                          end
//                        else
//                          GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(j)+')!', s, bError);
//                        ProgressBar1.StepIt;
//                      end;
//                    if ResultSet<>nil then
//                      begin
//                        LogThis('Освобождение ресурсов, занятых результатом выборки.', LogGroupGUID, lmtInfo);
//                        mysql_free_result(ResultSet);
//                      end;
//                    ProgressBar1.Position:=ProgressBar1.Min;
//                    // получение списка годов при помощи выборки из БД
//                    LogThis('Получение списка лет (годов)...', LogGroupGUID, lmtInfo);
//                    q:='SELECT DISTINCT LEFT(evn_datetime,4) FROM '+Configuration.sMySQLDatabase+'._evn ORDER BY LEFT(evn_datetime,4);';
//                    LogThis(q, LogGroupGUID, lmtSQL);
//                    i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                    if i=0 then
//                      begin
//                        LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                        ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                        if ResultSet<>nil then
//                          begin
//                            LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                            i:=mysql_num_rows(ResultSet);
//                            if i>0 then
//                              begin
//                                LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                ProgressBar1.Max:=i;
//                                for j:=0 to i-1 do
//                                  begin
//                                    LogThis('Получение очередной строки выборки ('+IntToStr(j)+').', LogGroupGUID, lmtInfo);
//                                    ResultRow:=mysql_fetch_row(ResultSet);
//                                    if ResultRow<>nil then
//                                      begin
//                                        LogThis('Операция получения очередной строки выборки ('+IntToStr(j)+') прошла успешно.', LogGroupGUID, lmtInfo);
//                                        cmbbxSelectedMonthYear.Items.Add(string(ResultRow[0]));
//                                        cmbbxSelectedYear.Items.Add(string(ResultRow[0]));
//                                        ProgressBar1.StepIt;
//                                      end
//                                    else
//                                      GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(j)+')!', s, bError);
//                                  end;
//                              end
//                            else
//                              GenerateError('Формирование отчётов невозможно, так как в таблице статистических данных не было найдено ни одной записи!', s, bError);
//                          end
//                        else
//                          GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                      end
//                    else
//                      GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                  end
//                else
//                  GenerateError('В системе не зарегестрироывано ни одного пользователя!', s, bError);
//              end
//            else
//              GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//          end
//        else
//          GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//        if bError then
//          ShowErrorBox(s, LogGroupGUID)
//        else
//          begin
//            DecodeDate(Now(), Year, Month, Day);
//            cmbbxSelectedMonthMonth.ItemIndex:=Month-1; // список начинается с нуля, поэтому отнимаем единицу
//            if cmbbxSelectedMonthYear.Items.Count>0 then
//              cmbbxSelectedMonthYear.ItemIndex:=cmbbxSelectedMonthYear.Items.IndexOf(IntToStr(Year));
//            if cmbbxSelectedYear.Items.Count>0 then
//              cmbbxSelectedYear.ItemIndex:=cmbbxSelectedYear.Items.IndexOf(IntToStr(Year));
//          end;
//        if ResultSet<>nil then
//          begin
//            LogThis('Освобождение ресурсов, занятых результатом выборки.', LogGroupGUID, lmtInfo);
//            mysql_free_result(ResultSet);
//          end;
//        ProgressBar1.Position:=ProgressBar1.Min;
//        SetModalWindowPosition(StatisticForm as TForm, Configuration.fpStatisticForm);
//        if bError=False then
//          begin
//            PreShowModal(sModalWinName, LogGroupGUID);
//            ShowModal;
//          end;
//      finally
//        PostShowModal(sModalWinName, LogGroupGUID);
//        SaveFormPosition(StatisticForm as TForm, Configuration.fpStatisticForm);
//        mr:=ModalResult;
//        if mr=mrOk then
//          begin
//            dtNow:=Now;
//            DecodeDate(dtNow, Year, Month, Day);
//            DecodeTime(dtNow, Hour, Min, Sec, MSec);
//            if RadioButton1.Checked then
//              begin
//                sStartDate:=DateToStr(dtpStartDate_stat.DateTime);
//                sStopDate:=DateToStr(dtpStopDate_stat.DateTime);
//              end;
//            if RadioButton2.Checked then
//              begin
//                sStartDate:=DateToStr(EncodeDate(StrToInt(cmbbxSelectedMonthYear.Items[cmbbxSelectedMonthYear.ItemIndex]), cmbbxSelectedMonthMonth.ItemIndex+1, 1));
//                // определение следующего месяца
//                iNextMonth:=cmbbxSelectedMonthMonth.ItemIndex+2;
//                iNextMonthYear:=StrToInt(cmbbxSelectedMonthYear.Items[cmbbxSelectedMonthYear.ItemIndex]);
//                if iNextMonth=13 then
//                  begin
//                    iNextMonth:=1;
//                    iNextMonthYear:=iNextMonthYear+1;
//                  end;
//                sStopDate:=DateToStr(EncodeDate(iNextMonthYear, iNextMonth, 1)-(EncodeDate(2004, 1, 2)-EncodeDate(2004, 1, 1)));
//              end;
//            if RadioButton3.Checked then
//              begin
//                sStartDate:=DateToStr(EncodeDate(StrToInt(cmbbxSelectedYear.Items[cmbbxSelectedYear.ItemIndex]), 1, 1));
//                sStopDate:=DateToStr(EncodeDate(StrToInt(cmbbxSelectedYear.Items[cmbbxSelectedYear.ItemIndex]), 12, 31));
//              end;
//            HTML:='<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">'+#13#10;
//            HTML:=HTML+'<HTML>'+#13#10;
//            HTML:=HTML+'  <HEAD>'+#13#10;
//            HTML:=HTML+'    <TITLE>Статистика по работе пользователей АРМ услуги "Отдых и развлечения" за период с '+sStartDate+' по '+sStopDate+'</TITLE>'+#13#10;
//            HTML:=HTML+'    <META CONTENT="no-cache" HTTP-EQUIV="pragma">'+#13#10;
//            HTML:=HTML+'    <META CONTENT="no-cache" HTTP-EQUIV="cache-control">'+#13#10;
//            HTML:=HTML+'    <META CONTENT=Dynamic NAME=Document-state>'+#13#10;
//            HTML:=HTML+'    <META content="text/html; charset=Windows-1251" http-equiv=Content-Type>'+#13#10;
//            HTML:=HTML+'    <STYLE MEDIA="screen, print" TYPE="text/css">'+#13#10;
//            HTML:=HTML+'      * {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 8pt; padding: 0; margin: 0; border-color: transparent; border-width: 0;}'+#13#10;
//            HTML:=HTML+'      TABLE, TD {border-style: solid;}'+#13#10;
//            HTML:=HTML+'    </STYLE>'+#13#10;
//            HTML:=HTML+'  </HEAD>'+#13#10;
//            HTML:=HTML+'  <BODY>'+#13#10;
//            HTML:=HTML+'    <CENTER>'+#13#10;
//            HTML:=HTML+'    <TABLE ALIGN="CENTER" BORDER="1" BGCOLOR="WHITE" WIDTH="656" STYLE="border-color: white; border-width: 0; table-layout: fixed; empty-cells: show; float: none; clear: both; border-collapse: collapse;">'+#13#10;
//            HTML:=HTML+'      <TBODY VALIGN="MIDDLE" STYLE="border-color: white; border-width: 0;">'+#13#10;
//            // определение параметров создаваемого отчёта
//            if chkbxDetailed.Checked then
//              begin
//                // подробный отчёт
//              end
//            else
//              begin
//                // свёрнутый отчёт
//                HTML:=HTML+'        <TR>'+#13#10;
//                HTML:=HTML+'          <TD HEIGHT="1px" STYLE="border-color: white; border-width: 0;" WIDTH="80px"></TD>'+#13#10;
//                HTML:=HTML+'          <TD HEIGHT="1px" STYLE="border-color: white; border-width: 0;" WIDTH="144px"></TD>'+#13#10;
//                HTML:=HTML+'          <TD HEIGHT="1px" STYLE="border-color: white; border-width: 0;" WIDTH="144px"></TD>'+#13#10;
//                HTML:=HTML+'          <TD HEIGHT="1px" STYLE="border-color: white; border-width: 0;" WIDTH="144px"></TD>'+#13#10;
//                HTML:=HTML+'          <TD HEIGHT="1px" STYLE="border-color: white; border-width: 0;" WIDTH="144px"></TD>'+#13#10;
//                HTML:=HTML+'        </TR>'+#13#10;
//                HTML:=HTML+'        <TR><TD COLSPAN="5" STYLE="border-bottom-color: #CCCCCC; border-top-color: white; border-left-color: white; border-right-color: white; border-width: 0px 0px 1px 0px; font-size: 7pt; text-align: right;">';
//                HTML:=HTML+'Справочно-информационный цех<BR>филиала &laquo;Минская городская телефонная сеть&raquo;<BR>РУП &laquo;Белтелеком&raquo;</TD></TR>'+#13#10;
//                HTML:=HTML+'        <TR><TD COLSPAN="5" STYLE="border-color: white; border-width: 0; text-align: center; font-size: 13pt; font-weight: bold; padding: 20px 0px 3px 0px;">';
//                HTML:=HTML+'Статистика&nbsp;по&nbsp;работе&nbsp;пользователей АРМ&nbsp;&laquo;Отдых&nbsp;и&nbsp;развлечения&raquo; за период с '+sStartDate+' по '+sStopDate+'<BR></TD></TR>'+#13#10;
//                // перебираем список отмеченых пользователей
//                for k:=0 to chklbxUsers.Count-1 do
//                  begin
//                    iSumIns:=0;
//                    iSumMod:=0;
//                    iSumDel:=0;
//                    iSumRec:=0;
//                    if chklbxUsers.Checked[k] then
//                      begin
//                        s:=chklbxUsers.Items[k];
//                        // получаем список дат в которых есть данные по событиям
//                        q:='SELECT DISTINCT LEFT(evn_datetime,10) FROM '+Configuration.sMySQLDatabase+'._evn LEFT JOIN '+Configuration.sMySQLDatabase+'._usr ON usr_id=evn_by_user_id WHERE usr_fullname="'+s+'" AND LEFT(evn_datetime,10) BETWEEN "'+Copy
//                          (sStartDate, 7, 4)+'-'+Copy(sStartDate, 4, 2)+'-'+Copy(sStartDate, 0, 2)+'" AND "'+Copy(sStopDate, 7, 4)+'-'+Copy(sStopDate, 4, 2)+'-'+Copy(sStopDate, 0, 2)+'" ORDER BY LEFT(evn_datetime,10);';
//                        LogThis(q, LogGroupGUID, lmtSQL);
//                        i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                        if i=0 then
//                          begin
//                            LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                            ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                            if ResultSet<>nil then
//                              begin
//                                LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                                i:=mysql_num_rows(ResultSet);
//                                if i>=0 then
//                                  begin
//                                    LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                    ProgressBar1.Max:=i;
//                                    slTemp.Clear;
//                                    for j:=0 to i-1 do
//                                      begin
//                                        LogThis('Получение очередной строки выборки ('+IntToStr(j)+').', LogGroupGUID, lmtInfo);
//                                        ResultRow:=mysql_fetch_row(ResultSet);
//                                        if ResultRow<>nil then
//                                          begin
//                                            LogThis('Операция получения очередной строки выборки ('+IntToStr(j)+') прошла успешно.', LogGroupGUID, lmtInfo);
//                                            slTemp.Add(string(ResultRow[0]));
//                                          end
//                                        else
//                                          GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(j)+')!', s, bError);
//                                        ProgressBar1.StepIt;
//                                      end;
//                                  end
//                                else
//                                  begin
//                                    LogThis('Данных по работе пользователя "'+s+'" в базе данных не найдено.', LogGroupGUID, lmtInfo);
//                                  end;
//                                if ResultSet<>nil then
//                                  begin
//                                    LogThis('Освобождение ресурсов, занятых результатом выборки.', LogGroupGUID, lmtInfo);
//                                    mysql_free_result(ResultSet);
//                                  end;
//                              end
//                            else
//                              GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                          end
//                        else
//                          GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                        ProgressBar1.Position:=ProgressBar1.Min;
//                        if bError then
//                          ShowErrorBox(s, LogGroupGUID)





//                          // перебираем полученный список дат и делаем выборки по типам действий для каждой из дат
//                        else
//                          begin
//                            HTML:=HTML+'        <TR>'+#13#10;
//                            HTML:=HTML+'          <TD VALIGN="TOP" COLSPAN="5" STYLE="text-align: left; font-size: 12pt; font-weight: bold; border-color: white; border-width: 0; padding: 20px 2px 2px 0px;">'+s+'</TD>'+#13#10;
//                            HTML:=HTML+'        </TR>'+#13#10;
//                            if i>0 then
//                              begin
//                                HTML:=HTML+'        <TR>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 2px; border-color: black; font-weight: bold; font-size: 8pt; padding: 2px;">Дата</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; font-size: 8pt; padding: 2px;">Создано</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; font-size: 8pt; padding: 2px;">Исправлено</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; font-size: 8pt; padding: 2px;">Удалено</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; font-size: 8pt; padding: 2px;">Восстановлено</TD>'+#13#10;
//                                HTML:=HTML+'        </TR>'+#13#10;
//                                ProgressBar1.Max:=slTemp.Count;
//                                for j:=0 to slTemp.Count-1 do
//                                  begin
//                                    // получение количества добавленых элементов
//                                    sIns:='0';
//                                    s:=chklbxUsers.Items[k];
//                                    q:='SELECT evn_datetime, evn_type, evn_object, evn_object_id FROM '+Configuration.sMySQLDatabase+'._evn '+'LEFT JOIN '+Configuration.sMySQLDatabase+'._usr ON usr_id=evn_by_user_id WHERE usr_fullname="'+s+'" '+
//                                      'AND evn_type="INS" AND LEFT(evn_datetime,10)="'+slTemp[j]+'" '+'GROUP BY evn_type, evn_object, evn_object_id;';
//                                    LogThis(q, LogGroupGUID, lmtSQL);
//                                    i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                                    if i=0 then
//                                      begin
//                                        LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                                        ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                                            i:=mysql_num_rows(ResultSet);
//                                            if i>=0 then
//                                              begin
//                                                LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                                sIns:=IntToStr(i);
//                                                iSumIns:=iSumIns+StrToInt(sIns);
//                                                // for l:=0 to i-1 do
//                                                // begin
//                                                // LogThis('Получение очередной строки выборки ('+IntToStr(l)+').',LogGroupGUID,lmtInfo);
//                                                // ResultRow:=mysql_fetch_row(ResultSet);
//                                                // if ResultRow<>nil then
//                                                // begin
//                                                // LogThis('Операция получения очередной строки выборки ('+IntToStr(l)+') прошла успешно.',LogGroupGUID,lmtInfo);
//                                                // end
//                                                // else GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(l)+')!',s,bError);
//                                                // end;
//                                              end
//                                            else
//                                              begin
//                                                LogThis('Данных по работе пользователя "'+s+'" в базе данных не найдено.', LogGroupGUID, lmtInfo);
//                                              end;
//                                          end
//                                        else
//                                          GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Освобождение ресурсов, занятых результатом выборки...', LogGroupGUID, lmtInfo);
//                                            mysql_free_result(ResultSet);
//                                          end;
//                                      end
//                                    else
//                                      GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                                    // получение количества исправленных элементов
//                                    sMod:='0';
//                                    s:=chklbxUsers.Items[k];
//                                    q:='SELECT evn_datetime, evn_type, evn_object, evn_object_id FROM '+Configuration.sMySQLDatabase+'._evn '+'LEFT JOIN '+Configuration.sMySQLDatabase+'._usr ON usr_id=evn_by_user_id WHERE usr_fullname="'+s+'" '+
//                                      'AND evn_type="MOD" AND LEFT(evn_datetime,10)="'+slTemp[j]+'" '+'GROUP BY evn_type, evn_object, evn_object_id;';
//                                    LogThis(q, LogGroupGUID, lmtSQL);
//                                    i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                                    if i=0 then
//                                      begin
//                                        LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                                        ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                                            i:=mysql_num_rows(ResultSet);
//                                            if i>=0 then
//                                              begin
//                                                LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                                sMod:=IntToStr(i);
//                                                iSumMod:=iSumMod+StrToInt(sMod);
//                                                // for l:=0 to i-1 do
//                                                // begin
//                                                // LogThis('Получение очередной строки выборки ('+IntToStr(l)+').',LogGroupGUID,lmtInfo);
//                                                // ResultRow:=mysql_fetch_row(ResultSet);
//                                                // if ResultRow<>nil then
//                                                // begin
//                                                // LogThis('Операция получения очередной строки выборки ('+IntToStr(l)+') прошла успешно.',LogGroupGUID,lmtInfo);
//                                                // end
//                                                // else GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(l)+')!',s,bError);
//                                                // end;
//                                              end
//                                            else
//                                              begin
//                                                LogThis('Данных по работе пользователя "'+s+'" в базе данных не найдено.', LogGroupGUID, lmtInfo);
//                                              end;
//                                          end
//                                        else
//                                          GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Освобождение ресурсов, занятых результатом выборки...', LogGroupGUID, lmtInfo);
//                                            mysql_free_result(ResultSet);
//                                          end;
//                                      end
//                                    else
//                                      GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                                    // получение количества удалённых элементов
//                                    sDel:='0';
//                                    s:=chklbxUsers.Items[k];
//                                    q:='SELECT evn_datetime, evn_type, evn_object, evn_object_id FROM '+Configuration.sMySQLDatabase+'._evn '+'LEFT JOIN '+Configuration.sMySQLDatabase+'._usr ON usr_id=evn_by_user_id WHERE usr_fullname="'+s+'" '+
//                                      'AND evn_type="DEL" AND LEFT(evn_datetime,10)="'+slTemp[j]+'" '+'GROUP BY evn_type, evn_object, evn_object_id;';
//                                    LogThis(q, LogGroupGUID, lmtSQL);
//                                    i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                                    if i=0 then
//                                      begin
//                                        LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                                        ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                                            i:=mysql_num_rows(ResultSet);
//                                            if i>=0 then
//                                              begin
//                                                LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                                sDel:=IntToStr(i);
//                                                iSumDel:=iSumDel+StrToInt(sDel);
//                                              end
//                                            else
//                                              LogThis('Данных по работе пользователя "'+s+'" в базе данных не найдено.', LogGroupGUID, lmtInfo);
//                                          end
//                                        else
//                                          GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Освобождение ресурсов, занятых результатом выборки...', LogGroupGUID, lmtInfo);
//                                            mysql_free_result(ResultSet);
//                                          end;
//                                      end
//                                    else
//                                      GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                                    // получение количества восстановленых элементов
//                                    sRec:='0';
//                                    s:=chklbxUsers.Items[k];
//                                    q:='SELECT evn_datetime, evn_type, evn_object, evn_object_id FROM '+Configuration.sMySQLDatabase+'._evn '+'LEFT JOIN '+Configuration.sMySQLDatabase+'._usr ON usr_id=evn_by_user_id WHERE usr_fullname="'+s+'" '+
//                                      'AND evn_type="REC" AND LEFT(evn_datetime,10)="'+slTemp[j]+'" '+'GROUP BY evn_type, evn_object, evn_object_id;';
//                                    LogThis(q, LogGroupGUID, lmtSQL);
//                                    i:=mysql_real_query(MySQLConnectionHandler, PAnsiChar(AnsiString(q)), Length(q));
//                                    if i=0 then
//                                      begin
//                                        LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
//                                        ResultSet:=mysql_store_result(MySQLConnectionHandler);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
//                                            i:=mysql_num_rows(ResultSet);
//                                            if i>=0 then
//                                              begin
//                                                LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
//                                                sRec:=IntToStr(i);
//                                                iSumRec:=iSumRec+StrToInt(sRec);
//                                              end
//                                            else
//                                              begin
//                                                LogThis('Данных по работе пользователя "'+s+'" в базе данных не найдено.', LogGroupGUID, lmtInfo);
//                                              end;
//                                          end
//                                        else
//                                          GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', s, bError);
//                                        if ResultSet<>nil then
//                                          begin
//                                            LogThis('Освобождение ресурсов, занятых результатом выборки...', LogGroupGUID, lmtInfo);
//                                            mysql_free_result(ResultSet);
//                                          end;
//                                      end
//                                    else
//                                      GenerateError('Возникла ошибка при выполнении запроса!', s, bError);
//                                    // вывод результатов
//                                    HTML:=HTML+'        <TR>'+#13#10;
//                                    HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+IntToStr(1+integer(((slTemp.Count-1)-j)=0))+'px 2px; border-color: black; font-size: 8pt; padding: 2px;">'+Copy(slTemp[j], 9, 2)+'.'+Copy
//                                      (slTemp[j], 6, 2)+'.'+Copy(slTemp[j], 0, 4)+'</TD>'+#13#10;
//                                    HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+IntToStr(1+integer(((slTemp.Count-1)-j)=0))+'px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+sIns+'</TD>'+#13#10;
//                                    HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+IntToStr(1+integer(((slTemp.Count-1)-j)=0))+'px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+sMod+'</TD>'+#13#10;
//                                    HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+IntToStr(1+integer(((slTemp.Count-1)-j)=0))+'px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+sDel+'</TD>'+#13#10;
//                                    HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+IntToStr(1+integer(((slTemp.Count-1)-j)=0))+'px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+sRec+'</TD>'+#13#10;
//                                    HTML:=HTML+'        </TR>'+#13#10;
//                                    ProgressBar1.StepIt;
//                                  end;
//                                // итого
//                                HTML:=HTML+'        <TR>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 2px; border-color: black; font-size: 8pt; padding: 2px;">Итого:</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+IntToStr(iSumIns)+'</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+IntToStr(iSumMod)+'</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+IntToStr(iSumDel)+'</TD>'+#13#10;
//                                HTML:=HTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; font-size: 8pt; padding: 2px;">'+IntToStr(iSumRec)+'</TD>'+#13#10;
//                                HTML:=HTML+'        </TR>'+#13#10;
//                                ProgressBar1.Position:=ProgressBar1.Min;
//                              end
//                            else
//                              begin
//                                HTML:=HTML+'        <TR>'+#13#10;
//                                HTML:=HTML+'          <TD COLSPAN="5" STYLE="text-align: left; border-width: 0px; border-color: white; font-size: 8pt; padding: 2px 2px 2px 0px;">Данные по работе указанного пользователя отсутствуют.</TD>'+#13#10;
//                                HTML:=HTML+'        </TR>'+#13#10;
//                              end;
//                          end;
//                      end;
//                  end;
//                HTML:=HTML+'        <TR>'+#13#10;
//                HTML:=HTML+'          <TD COLSPAN="5" HEIGHT="20" STYLE="text-align: left; color: #EEEEEE; font-size: 5pt; border-color: white; border-width: 1px 0px 0px 0px; padding-top: 1px;"></TD>'+#13#10;
//                HTML:=HTML+'        </TR>'+#13#10;
//                HTML:=HTML+'        <TR>'+#13#10;
//                HTML:=HTML+'          <TD COLSPAN="5" STYLE="text-align: center; font-size: 5pt; border-bottom-color: white; border-top-color: #CCCCCC; border-left-color: white; border-right-color: white; border-width: 1px 0px 0px 0px; padding-top: 1px;">Отчёт подготовлен '+DateToStr(EncodeDate(Year, Month, Day))+' в '+TimeToStr
//                  (EncodeTime(Hour, Min, Sec, MSec))+' при помощи АРМ услуги &laquo;Отдых и развлечения&raquo;, &copy;&nbsp;2008&nbsp;by&nbsp;Vlad&nbsp;Ivanov</TD>'+#13#10;
//                HTML:=HTML+'        </TR>'+#13#10;
//              end;
//            HTML:=HTML+'      </TBODY>'+#13#10;
//            HTML:=HTML+'    </TABLE>'+#13#10;
//            HTML:=HTML+'    </CENTER>'+#13#10;
//            HTML:=HTML+'  </BODY>'+#13#10;
//            HTML:=HTML+'</HTML>'+#13#10;
//
//            with TStringList.Create do
//              try
//                Text:=HTML;
//                LogThis('Получение пути временного каталога.', LogGroupGUID, lmtInfo);
//                GetMem(TempPathNameBuffer, 1024+1);
//                r:=GetTempPath(1024, TempPathNameBuffer);
//                if r>0 then
//                  begin
//                    if r>1024 then
//                      begin
//                        FreeMem(TempPathNameBuffer);
//                        GetMem(TempPathNameBuffer, r+1);
//                      end;
//                    GetMem(TempFileNameBuffer, 1024+1);
//                    LogThis('Получение имени временного файла.', LogGroupGUID, lmtInfo);
//                    GetTempFileName(TempPathNameBuffer, 'OA4', 0, TempFileNameBuffer);
//                    q:=TempFileNameBuffer;
//                    LogThis('Удаление файла '+#39+q+#39+'.', LogGroupGUID, lmtInfo);
//                    DeleteFile(q);
//                    q:=ExtractFilePath(q)+Copy(ExtractFileName(q), 0, Length(ExtractFileName(q))-3)+'htm';
//                    LogThis('Имя временного файла - '+#39+q+#39+'.', LogGroupGUID, lmtInfo);
//                    if not FileExists(q) then
//                      begin
//                        LogThis('Попытка сохраниея отчёта во временный файл '+#39+q+#39+'.', LogGroupGUID, lmtInfo);
//                        SaveToFile(q);
//                        LogThis('Попытка открытия временного файла.', LogGroupGUID, lmtInfo);
//                        ShellExecute(Application.Handle, 'open', PChar(q), nil, nil, SW_MAXIMIZE);
//                      end
//                    else
//                      GenerateError('Возникла ошибка при сохранении отчёта во временный файл '+#39+q+#39+' - указанный файл уже существует!', s, bError);
//                  end
//                else
//                  GenerateError('Возникла ошибка при получении пути временного каталога!', s, bError);
//                if bError then
//                  ShowErrorBox(s, LogGroupGUID);
//              finally
//                if TempPathNameBuffer<>nil then
//                  FreeMem(TempPathNameBuffer);
//                if TempFileNameBuffer<>nil then
//                  FreeMem(TempFileNameBuffer);
//                Free;
//              end;
//          end;
//        Free;
//      end;
//  finally
//    slTemp.Free;
//  end;
//
//  ProcedureFooter(LogGroupGUID, True, True);
//end;



                          //procedure TMainForm.Do_AddPerformer;
//const
//  LogGroupGUID: string = '{B5F86CA3-610E-455E-884C-42704072A57B}';
//  sModalWinName: string = 'добавления записи об исполнителе действия';
//var
//  bError: boolean;
//  q, sErrorMessage: string;
//  i: integer;
//  PerformerForm: TPerformerForm;
//begin
//  ProcedureHeader('Процедура отображения окна '+sModalWinName, LogGroupGUID, False, False);
//  bError:=False;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  PerformerForm:=TPerformerForm.Create(Self);
//  with PerformerForm do
//    try
//      PreShowModal(sModalWinName, LogGroupGUID);
//      ShowModal;
//    finally
//      PostShowModal(sModalWinName, LogGroupGUID);
//      if ModalResult=mrOk then
//        begin
//          LogThis('Добавление записи об исполнителе подтверждено пользователем.',LogGroupGUID,lmtInfo);
//          ProgressBar1.Max:=1;
//          for i:=0 to cbPerformers.Items.Count-1 do
//            begin
//              if not bError then
//                if cbPerformers.Items[i]=Trim(ebFullName.Text) then
//                  GenerateError('Запись о таком исполнителе уже существует! Добавление новой записи производиться не будет!',sErrorMessage,bError);
//              end;
//          if not bError then
//            begin
//              q:='INSERT INTO '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers (fullname, position, contactphone) VALUES ('
//                +NormalizeStringForQuery(Trim(ebFullName.Text),True,False)+', '
//                +NormalizeStringForQuery(Trim(ebPosition.Text),True,False)+', '
//                +NormalizeStringForQuery(Trim(ebContactPhone.Text),True,False)+');';
//              LogThis(q,LogGroupGUID,lmtSQL);
//              i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//              if i<>0 then
//                GenerateError('Возникла ошибка при выполнении запроса!',sErrorMessage,bError)
//              else
//                begin
//                  LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//                  i:=mysql_affected_rows(hMySQLConnectionWithOVERSEERSERVER);
//                  if i<>1 then
//                    GenerateError('Количество обработанных строк ('+IntToStr(i)+') не соответствует требуемому (1)!',sErrorMessage,bError)
//                  else
//                    begin
//                      LogThis('Количество строк выборки соответствует требуемому.',LogGroupGUID,lmtInfo);
//                      LogThis('Добавление записи об исполнителе действия произведена успешно.',LogGroupGUID,lmtInfo);
//                      ProgressBar1.StepIt;
//                    end;
//                end;
//              Do_UpdatePerformersList;
//            end;
//        end
//      else LogThis('Добавление записи об исполнителе действия было отменено пользователем.',LogGroupGUID,lmtWarning);
//      Free;
//    end;
//
//  PreFooter(bError, sErrorMessage, LogGroupGUID);
//  ProcedureFooter(LogGroupGUID, False, False);
//end;
//
//procedure TMainForm.Do_RemovePerformer;
//const
//  LogGroupGUID: string = '{A4A42001-99BD-4AE2-8E6E-9A05CE3A4842}';
//var
//  b, bError: boolean;
//  q, sErrorMessage: string;
//  i: integer;
//  aCursor: TCursor;
//begin
//  ProcedureHeader('Процедура удаления записи об исполнителе действия', LogGroupGUID, False, False);
//  bError:=False;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  aCursor:=Screen.Cursor;
//  Screen.Cursor:=crDefault;
//  b:=MessageBox(Handle,PChar('Вы действительно хотите удалить информацию о выбранном исполнителе?'),PChar('OVERSEER - Подтверждение удаления'),MB_OKCANCEL+MB_ICONQUESTION+MB_DEFBUTTON2)=IDOK;
//  Application.ProcessMessages;
//  Screen.Cursor:=aCursor;
//
//  if b then
//    begin
//      LogThis('Удаление записи об исполнителе действия подтверждено пользователем.',LogGroupGUID,lmtInfo);
//      ProgressBar1.Max:=1;
//      q:='DELETE FROM '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers WHERE fullname='
//        +NormalizeStringForQuery(cbPerformers.Items[cbPerformers.ItemIndex],True,False)+';';
//      LogThis(q,LogGroupGUID,lmtSQL);
//      i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//      if i<>0 then
//        GenerateError('Возникла ошибка при попытке удаления записи об исполнителе действия!',sErrorMessage,bError)
//      else
//        begin
//          LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//          i:=mysql_affected_rows(hMySQLConnectionWithOVERSEERSERVER);
//          LogThis('Количество удалённых строк равно '+IntToStr(i)+'.',LogGroupGUID,lmtInfo);
//          if i<>1 then
//            GenerateError('Количество удалённых строк ('+IntToStr(i)+') не соответствует требуемому (1)!',sErrorMessage,bError)
//          else
//            begin
//              LogThis('Количество удалённых строк соответствует требуемому (1).',LogGroupGUID,lmtInfo);
//              LogThis('Удаление записи об исполнителе действия произведена успешно.',LogGroupGUID,lmtInfo);
//              ProgressBar1.StepIt;
//            end;
//        end;
//      Do_UpdatePerformersList;
//    end
//  else LogThis('Удаление записи об исполнителе действия было отменено пользователем.',LogGroupGUID,lmtWarning);
//
//  PreFooter(bError, sErrorMessage, LogGroupGUID);
//  ProcedureFooter(LogGroupGUID, False, False);
//end;
//
//procedure TMainForm.Do_EditPerformer;
//const
//  LogGroupGUID: string = '{6B5C6E25-5500-4675-B6BB-7F3A0540F907}';
//  sModalWinName: string = 'редактирования записи об исполнителе действия';
//var
//  bError: boolean;
//  q, sErrorMessage: string;
//  i: integer;
//  ResultSet: PMYSQL_RES;
//  ResultRow: PMYSQL_ROW;
//  s1, s2, s3: string;
//  PerformerForm: TPerformerForm;
//begin
//  ProcedureHeader('Процедура отображения окна '+sModalWinName, LogGroupGUID, False, False);
//  bError:=False;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  if not Configuration.OverseerServer.bMySQLConnected then
//    GenerateError('Для выполнения процедуры необходимо подключение к базе данных MySQL!',sErrorMessage,bError)
//  else
//    begin
//      q:='SELECT fullname, position, contactphone FROM '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers WHERE fullname='
//        +NormalizeStringForQuery(cbPerformers.Items[cbPerformers.ItemIndex],True,False)+';';
//      LogThis(q,LogGroupGUID,lmtSQL);
//      i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//      if i<>0 then
//        GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!',sErrorMessage,bError)
//      else
//        begin
//          LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//          ResultSet:=mysql_store_result(hMySQLConnectionWithOVERSEERSERVER);
//          if ResultSet=nil then
//            GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!',sErrorMessage,bError)
//          else
//            begin
//              LogThis('Результирующая выборка получена успешно.',LogGroupGUID,lmtInfo);
//              i:=mysql_num_rows(ResultSet);
//              LogThis('Количество строк выборки равно '+IntToStr(i)+'.',LogGroupGUID,lmtInfo);
//              if i<0 then
//                GenerateError('Возникла ошибка при получении количества срок результирующей выборки!',sErrorMessage,bError)
//              else
//                begin
//                  if i<>1 then
//                    GenerateError('Полученое количество строк выборки не соответствует требуемому (1)!',sErrorMessage,bError)
//                  else
//                    begin
//                      LogThis('Получение строки выборки...',LogGroupGUID,lmtInfo);
//                      ResultRow:=mysql_fetch_row(ResultSet);
//                      if ResultRow=nil then
//                        GenerateError('Возникла ошибка при загрузке данных строки выборки!',sErrorMessage,bError)
//                      else
//                        begin
//                          LogThis('Операция получения строки выборки прошла успешно.',LogGroupGUID,lmtInfo);
//                          s1:=string(ResultRow[0]);
//                          s2:=string(ResultRow[1]);
//                          s3:=string(ResultRow[2]);
//											    LogThis('Полученные строки - <'+s1+'>, <'+s2+'>, <'+s3+'>.',LogGroupGUID,lmtInfo);
//                          ProgressBar1.StepIt;
//                        end;
//                    end;
//                end;
//              LogThis('Освобождение ресурсов, занятых результатом выборки.',LogGroupGUID,lmtInfo);
//              mysql_free_result(ResultSet);
//            end;
//        end;
//    end;
//  if not bError then
//    begin
//      PerformerForm:=TPerformerForm.Create(Self);
//      with PerformerForm do
//        try
//          ebFullName.Text:=s1;
//          ebPosition.Text:=s2;
//          ebContactPhone.Text:=s3;
//          PreShowModal(sModalWinName, LogGroupGUID);
//          ShowModal;
//        finally
//          PostShowModal(sModalWinName, LogGroupGUID);
//          if ModalResult=mrOk then
//            begin
//              LogThis('Сохранение изменений подтверждено пользователем.',LogGroupGUID,lmtInfo);
//              if ((s1=NormalizeStringForQuery(Trim(ebFullName.Text),False,False)) and
//              (s2=NormalizeStringForQuery(Trim(ebPosition.Text),False,False)) and
//              (s3=NormalizeStringForQuery(Trim(ebContactPhone.Text),False,False))) then
//                LogThis('Сохранение изменений не требуется, поскольку данные о исполнителе не были изменены.',LogGroupGUID,lmtWarning)
//              else
//                begin
//                  ProgressBar1.Max:=1;
//                  q:='UPDATE '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers SET '
//                    +'fullname='+NormalizeStringForQuery(Trim(ebFullName.Text),True,False)+', '
//                    +'position='+NormalizeStringForQuery(Trim(ebPosition.Text),True,False)+', '
//                    +'contactphone='+NormalizeStringForQuery(Trim(ebContactPhone.Text),True,False)+' '
//                    +'WHERE fullname="'+s1+'";';
//                  LogThis(q,LogGroupGUID,lmtSQL);
//                  i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//
//                  if i<>0 then
//                    GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!',sErrorMessage,bError)
//                  else
//                    begin
//                      LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//                      i:=mysql_affected_rows(hMySQLConnectionWithOVERSEERSERVER);
//                      LogThis('Количество обработанных строк равно '+IntToStr(i)+'.',LogGroupGUID,lmtInfo);
//                      if i<0 then
//                        GenerateError('Возникла ошибка при получении количества обработанных срок!',sErrorMessage,bError)
//                      else
//                        begin
//                          if i<>1 then
//                            GenerateError('Количество обработанных строк ('+IntToStr(i)+') не соответствует требуемому (1)!',sErrorMessage,bError)
//                          else
//                            begin
//                              LogThis('Количество обработанных строк соответствует требуемому.',LogGroupGUID,lmtInfo);
//                              LogThis('Изменения произведены успешно.',LogGroupGUID,lmtInfo);
//                              ProgressBar1.StepIt;
//                            end;
//                        end;
//                    end;
//                  Do_UpdatePerformersList;
//                end;
//            end
//          else LogThis('Сохранение изменений не было подтверждено пользователем!',LogGroupGUID,lmtWarning);
//          Free;
//        end;
//    end;
//
//  PreFooter(bError, sErrorMessage, LogGroupGUID);
//  ProcedureFooter(LogGroupGUID, False, False);
//end;
//
//procedure TMainForm.Do_UpdatePerformersList;
//const
//  LogGroupGUID: string = '{7830ACE4-FC6E-4AC1-BF52-F75D90AA4BE2}';
//var
//  bError: boolean;
//  q, sErrorMessage: string;
//  i, j: integer;
//  ResultSet: PMYSQL_RES;
//  ResultRow: PMYSQL_ROW;
//begin
//  ProcedureHeader('Процедура обновления выпадающего списка исполнителей',LogGroupGUID,False,False);
//  bError:=False;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  if not Configuration.OverseerServer.bMySQLConnected then
//    GenerateError('Для выполнения процедуры необходимо подключение к базе данных MySQL!',sErrorMessage,bError)
//  else
//    begin
//      mePerformerDetails.Clear;
//      cbPerformers.Items.BeginUpdate;
//      cbPerformers.Clear;
//
//      LogThis('Получение списка исполнителей...',LogGroupGUID,lmtInfo);
//      q:='SELECT fullname FROM '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers ORDER BY fullname;';
//      LogThis(q,LogGroupGUID,lmtSQL);
//      i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//      if i<>0 then
//        GenerateError('Возникла ошибка при получения списка записей об исполнителях действия!',sErrorMessage,bError)
//      else
//        begin
//          LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//          ResultSet:=mysql_store_result(hMySQLConnectionWithOVERSEERSERVER);
//          if ResultSet=nil then
//            GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!',sErrorMessage,bError)
//          else
//            begin
//              LogThis('Результирующая выборка получена успешно.',LogGroupGUID,lmtInfo);
//              i:=mysql_num_rows(ResultSet);
//              LogThis('Количество строк выборки равно '+IntToStr(i)+'.',LogGroupGUID,lmtInfo);
//              if i<0 then
//                GenerateError('Возникла ошибка при получении количества срок результирующей выборки!',sErrorMessage,bError)
//              else
//                begin
//                  ProgressBar1.Max:=i;
//                  for j:=0 to i-1 do
//                    if not bError then
//                      begin
//                        LogThis('Получение очередной строки выборки ('+IntToStr(j)+').',LogGroupGUID,lmtInfo);
//                        ResultRow:=mysql_fetch_row(ResultSet);
//                        if ResultRow=nil then
//                          GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(j)+')!',sErrorMessage,bError)
//                        else
//                          begin
//                            LogThis('Операция получения очередной строки выборки ('+IntToStr(j)+') прошла успешно.',LogGroupGUID,lmtInfo);
//                            cbPerformers.Items.Append(string(ResultRow[0]));
//                            LogThis('Полученная строка - <'+ResultRow[0]+'>.',LogGroupGUID,lmtInfo);
//                            ProgressBar1.StepIt;
//                          end;
//                      end;
//                end;
//              LogThis('Освобождение ресурсов, занятых результатом выборки.',LogGroupGUID,lmtInfo);
//              mysql_free_result(ResultSet);
//            end;
//        end;
//      cbPerformers.Items.EndUpdate;
//      // выставление "исполнителя по умолчанию"
////      cbPerformers.ItemIndex:=cbPerformers.Items.IndexOf(Configuration.sDefaultPerformer);
////      if cbPerformers.ItemIndex<0 then
////        mePerformerDetails.Clear
////      else Do_ShowPerformersData;
//    end;
//
//  PreFooter(bError, sErrorMessage, LogGroupGUID);
//  ProcedureFooter(LogGroupGUID, False, True);
//end;
//
//procedure TMainForm.Do_ShowPerformersData;
//const
//  LogGroupGUID: string = '{0962E8BF-8C81-4DD7-A482-06D9F437BCA9}';
//var
//  bError: boolean;
//  q, sErrorMessage: string;
//  i: integer;
//  ResultSet: PMYSQL_RES;
//  ResultRow: PMYSQL_ROW;
//begin
//  ProcedureHeader('Процедура вывода данных о выбранном из списка исполнителе', LogGroupGUID, False, False);
//  bError:=False;
//  ProgressBar1.Position:=ProgressBar1.Min;
//
//  LogThis('Очистка поля данных исполнителя исполнителя...',LogGroupGUID,lmtInfo);
//  mePerformerDetails.Clear;
//
//  if not Configuration.OverseerServer.bMySQLConnected then
//    GenerateError('Для выполнения процедуры необходимо подключение к базе данных MySQL!',sErrorMessage,bError)
//  else
//    begin
//      mePerformerDetails.Lines.BeginUpdate;
//      ProgressBar1.Max:=1;
//      LogThis('Получение данных исполнителя...',LogGroupGUID,lmtInfo);
//      q:='SELECT fullname, position, contactphone FROM '+string(Configuration.OverseerServer.sMySQLDatabase)+'._performers WHERE fullname='
//        +NormalizeStringForQuery(cbPerformers.Items[cbPerformers.ItemIndex],True,False)+';';
//      LogThis(q,LogGroupGUID,lmtSQL);
//      i:=mysql_real_query(hMySQLConnectionWithOVERSEERSERVER,PAnsiChar(AnsiString(q)),Length(q));
//      if i<>0 then
//        GenerateError('Возникла ошибка при получения списка записей об исполнителях действия!',sErrorMessage,bError)
//      else
//        begin
//          LogThis('Запрос выполнен успешно.',LogGroupGUID,lmtInfo);
//          ResultSet:=mysql_store_result(hMySQLConnectionWithOVERSEERSERVER);
//          if ResultSet=nil then
//            GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!',sErrorMessage,bError)
//          else
//            begin
//              LogThis('Результирующая выборка получена успешно.',LogGroupGUID,lmtInfo);
//              i:=mysql_num_rows(ResultSet);
//              LogThis('Количество строк выборки равно '+IntToStr(i)+'.',LogGroupGUID,lmtInfo);
//              if i<0 then
//                GenerateError('Возникла ошибка при получении количества срок результирующей выборки!',sErrorMessage,bError)
//              else
//                begin
//                  if i<>1 then
//                    GenerateError('Полученое количество строк выборки не соответствует требуемому (1)!',sErrorMessage,bError)
//                  else
//                    begin
//                      ResultRow:=mysql_fetch_row(ResultSet);
//                      if ResultRow=nil then
//                        GenerateError('Возникла ошибка при загрузке данных строки выборки!',sErrorMessage,bError)
//                      else
//                        begin
//                          LogThis('Операция получения строки выборки прошла успешно.',LogGroupGUID,lmtInfo);
//                          mePerformerDetails.Lines.Append(string(ResultRow[0]));
//                          mePerformerDetails.Lines.Append(string(ResultRow[1]));
//                          mePerformerDetails.Lines.Append(string(ResultRow[2]));
//                          LogThis('Полученные строки - <'+string(ResultRow[0])+'>, <'+string(ResultRow[1])+'>, <'+string(ResultRow[2])+'>.',LogGroupGUID,lmtInfo);
//                          ProgressBar1.StepIt;
//                        end;
//                    end;
//                end;
//              LogThis('Освобождение ресурсов, занятых результатом выборки.',LogGroupGUID,lmtInfo);
//              mysql_free_result(ResultSet);
//            end;
//        end;
//      mePerformerDetails.Lines.EndUpdate;
//    end;
//
//  PreFooter(bError, sErrorMessage, LogGroupGUID);
//  ProcedureFooter(LogGroupGUID, False, False);
//end;
//

// Предварительное удаление таблицы xrd_<yyyymmdd> на STATSERVER при её наличии
// УБРАТЬ КОММЕНТАРИИ ДЛЯ ОТЛАДКИ - ПРИ ОБЫЧНОЙ РАБОТЕ ВКЛЮЧЕНА РАБОТА С ВРЕМЕННЫМИ ТАБЛИЦАМИ, ДОСТУПНЫМИ ТОЛЬКО ИЗ ДАННОЙ СЕССИИ
// if not bError then
// begin
// LogThis('>> Выполняется операция по удалению таблиц данных в случае их наличия...', LogGroupGUID, lmtInfo);
// if not Configuration.StatServer.bConnected then
// GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
// else
// begin
// if mysql_ping(Configuration.StatServer.hConnection)<>0 then
// GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
// else
// begin
// q:='DROP TABLE IF EXISTS '+Configuration.StatServer.sMySQLDatabase_IRDA_Location+'.tmp_05_1, '+Configuration.StatServer.sMySQLDatabase_IRDA_Location+'.tmp_05_2, '+Configuration.StatServer.sMySQLDatabase_IRDA_Location+'.tmp_05_3;';
// LogThis(q, LogGroupGUID, lmtSQL);
// if mysql_real_query(Configuration.StatServer.hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
// GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
// else
// LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
// end;
// end;
// LogThis('<< Выполнение операции по удалению таблиц данных в случае их наличия завершено.', LogGroupGUID, lmtInfo);
// end;

  # подготовка таблицы irda

  # удаление существующих временных таблиц
  DROP TABLE IF EXISTS irda.tmp_09_1, irda.tmp_09_2, irda.tmp_09_2_otsev;

  # создание временной таблицы с данными на основе фодготовленной таблицы irda
  CREATE TABLE irda.tmp_09_1 (KEY ani (ani), KEY ddi (ddi), KEY datum (datum)) TYPE=MyISAM SELECT * FROM irda.irda_201002 WHERE 1;
  # апдейт данных таблицы, нормализация поля ddi
  UPDATE irda.tmp_09_1 SET ddi="109" WHERE (LEFT(ddi,3)="109");
  UPDATE irda.tmp_09_1 SET ddi="130" WHERE (LEFT(ddi,3)="130");
  UPDATE irda.tmp_09_1 SET ddi="175" WHERE (LEFT(ddi,3)="175");
  UPDATE irda.tmp_09_1 SET ddi="188" WHERE (LEFT(ddi,3)="188");
  UPDATE irda.tmp_09_1 SET ddi="190" WHERE (LEFT(ddi,3)="190");
  UPDATE irda.tmp_09_1 SET ddi="191" WHERE (LEFT(ddi,3)="191");
  UPDATE irda.tmp_09_1 SET ddi="192" WHERE (LEFT(ddi,3)="192");
  UPDATE irda.tmp_09_1 SET ddi="193" WHERE (LEFT(ddi,3)="193");
  UPDATE irda.tmp_09_1 SET ddi="194" WHERE (LEFT(ddi,3)="194");
  UPDATE irda.tmp_09_1 SET ddi="195" WHERE (LEFT(ddi,3)="195");
  UPDATE irda.tmp_09_1 SET ddi="196" WHERE (LEFT(ddi,3)="196");
  UPDATE irda.tmp_09_1 SET ddi="197" WHERE (LEFT(ddi,3)="197");
  UPDATE irda.tmp_09_1 SET ddi="198" WHERE (LEFT(ddi,3)="198");
  UPDATE irda.tmp_09_1 SET ddi="199" WHERE (LEFT(ddi,4)="1111");
  UPDATE irda.tmp_09_1 SET ddi="2003498" WHERE (LEFT(ddi,7)="2003498");
  UPDATE irda.tmp_09_1 SET ddi="9910911" WHERE (LEFT(ddi,4)="2222") OR (LEFT(ddi,7)="9910911");
  UPDATE irda.tmp_09_1 SET ddi="99175" WHERE (LEFT(ddi,5)="99175");
  UPDATE irda.tmp_09_1 SET ddi="99188" WHERE (LEFT(ddi,5)="99188");
  UPDATE irda.tmp_09_1 SET ddi="99190" WHERE (LEFT(ddi,5)="99190");
  UPDATE irda.tmp_09_1 SET ddi="99191" WHERE (LEFT(ddi,5)="99191");
  UPDATE irda.tmp_09_1 SET ddi="99192" WHERE (LEFT(ddi,5)="99192");
  UPDATE irda.tmp_09_1 SET ddi="99193" WHERE (LEFT(ddi,5)="99193");
  UPDATE irda.tmp_09_1 SET ddi="99194" WHERE (LEFT(ddi,5)="99194");
  UPDATE irda.tmp_09_1 SET ddi="99195" WHERE (LEFT(ddi,5)="99195");
  UPDATE irda.tmp_09_1 SET ddi="99196" WHERE (LEFT(ddi,5)="99196");
  UPDATE irda.tmp_09_1 SET ddi="99197" WHERE (LEFT(ddi,5)="99197");
  UPDATE irda.tmp_09_1 SET ddi="9919911" WHERE (LEFT(ddi,7)="9919911");

  # создание временной таблицы с данными на основе пропатченной таблицы
  CREATE TABLE irda.tmp_09_2 (KEY ani (ani), KEY ddi (ddi), KEY datum (datum)) TYPE=MyISAM SELECT * FROM irda.tmp_09_1 WHERE ddi
  IN("109", "130", "175", "188", "190", "191", "192", "193", "194", "195", "196", "197", "199", "2003498", "9910911", "99175", "99188", "99190", "99191", "99192", "99193", "99194", "99195", "99196", "99197", "9919911");

  # создание временной таблицы с данными на основе пропатченной таблицы
  CREATE TABLE irda.tmp_09_2_otsev (KEY ani (ani), KEY ddi (ddi), KEY datum (datum)) TYPE=MyISAM SELECT * FROM irda.tmp_09_1 WHERE !(ddi
  IN("109", "130", "175", "188", "190", "191", "192", "193", "194", "195", "196", "197", "199", "2003498", "9910911", "99175", "99188", "99190", "99191", "99192", "99193", "99194", "99195", "99196", "99197", "9919911"));

  # контроль отсеянных звонков
  #SELECT ddi, datum, WEEKDAY(datum), HOUR(vrijeme), COUNT(*) FROM irda.tmp_09_2_otsev GROUP BY ddi, datum, WEEKDAY(datum), HOUR(vrijeme);
  #SELECT ddi, COUNT(*) FROM irda.tmp_09_2_otsev GROUP BY ddi;


  DROP TABLE IF EXISTS irda.tmp_09_3_1, irda.tmp_09_3_2, irda.tmp_09_3_3, irda.tmp_09_3_4, irda.tmp_09_3_5, irda.tmp_09_3_6;

  CREATE TABLE irda.tmp_09_3_1 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # 1. пришло на СТ-платформу
  # голосовые
  INSERT INTO irda.tmp_09_3_1
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений, пришедших на СТ-платформу", SUM(dur) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, пришедшего на СТ-платформу"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_1
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений, пришедших на СТ-платформу", SUM(dur) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, пришедшего на СТ-платформу"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  GROUP BY "";

  # автоинформаторы
  INSERT INTO irda.tmp_09_3_1
  SELECT ddi AS "Номер услуги", "1", "0", "0", COUNT(*) AS "Количество соединений, пришедших на СТ-платформу", SUM(dur) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, пришедшего на СТ-платформу"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_1
  SELECT "Итого:" AS "Номер услуги", "1", "1", "0", COUNT(*) AS "Количество соединений, пришедших на СТ-платформу", SUM(dur) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, пришедшего на СТ-платформу"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_1
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений, пришедших на СТ-платформу", SUM(dur) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, пришедших на СТ-платформу (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, пришедшего на СТ-платформу"
  FROM irda.tmp_09_2
  WHERE
  (srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))) OR
  (srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197"))
  GROUP BY "";


  # 2. принято СТ-платформой
  CREATE TABLE irda.tmp_09_3_2 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # голосовые
  INSERT INTO irda.tmp_09_3_2
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений, принятых СТ-платформой", SUM(dur) AS "Общая продолжительность соединений, принятых СТ-платформой (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, принятого СТ-платформой"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_2
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений, принятых СТ-платформой", SUM(dur) AS "Общая продолжительность соединений, принятых СТ-платформой (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, принятого СТ-платформой"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  GROUP BY "";

  # автоинформаторы
  INSERT INTO irda.tmp_09_3_2
  SELECT ddi AS "Номер услуги", "1", "0", "0", COUNT(*) AS "Количество соединений, принятых СТ-платформой", SUM(dur) AS "Общая продолжительность соединений, принятых СТ-платформой (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, принятого СТ-платформой"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  AND v_mreza>""
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_2
  SELECT "Итого:" AS "Номер услуги", "1", "1", "0", COUNT(*) AS "Количество соединений, принятых СТ-платформой", SUM(dur) AS "Общая продолжительность соединений, принятых СТ-платформой (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, принятого СТ-платформой"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  AND v_mreza>""
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_2
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений, принятых СТ-платформой", SUM(dur) AS "Общая продолжительность соединений, принятых СТ-платформой (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, принятых СТ-платформой (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, принятого СТ-платформой"
  FROM irda.tmp_09_2
  WHERE
  ((srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))) OR
  (srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")))
  AND v_mreza>""
  GROUP BY "";


  # 3. получили ответ автоинформатора
  CREATE TABLE irda.tmp_09_3_3 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # голосовые
  INSERT INTO irda.tmp_09_3_3
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений, получившие ответ автоинформатора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получивших ответ автоинформатора"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_3
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений, получившие ответ автоинформатора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получивших ответ автоинформатора"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  GROUP BY "";

  # автоинформаторы
  INSERT INTO irda.tmp_09_3_3
  SELECT ddi AS "Номер услуги", "1", "0", "0", COUNT(*) AS "Количество соединений, получившие ответ автоинформатора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получивших ответ автоинформатора"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  AND v_mreza>""
  AND dur>0
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_3
  SELECT "Итого:" AS "Номер услуги", "1", "1", "0", COUNT(*) AS "Количество соединений, получившие ответ автоинформатора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получивших ответ автоинформатора"
  FROM irda.tmp_09_2
  WHERE srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")
  AND v_mreza>""
  AND dur>0
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_3
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений, получившие ответ автоинформатора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ автоинформатора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получивших ответ автоинформатора"
  FROM irda.tmp_09_2
  WHERE
  ((srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))) OR
  (srv=1 AND ddi IN("175", "188", "191", "192", "194", "195", "196", "197", "99175", "99188", "99191", "99192", "99194", "99195", "99196", "99197")))
  AND v_mreza>""
  AND dur>0
  GROUP BY "";


  # 4. распределены на рабочее место
  CREATE TABLE irda.tmp_09_3_4 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # голосовые
  INSERT INTO irda.tmp_09_3_4
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений, распределённых на рабочие места", SUM(dur) AS "Общая продолжительность соединений, распределённых на рабочие места (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, распределённого на рабочие места"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_4
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений, распределённых на рабочие места", SUM(dur) AS "Общая продолжительность соединений, распределённых на рабочие места (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, распределённого на рабочие места"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_4
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений, распределённых на рабочие места", SUM(dur) AS "Общая продолжительность соединений, распределённых на рабочие места (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, распределённых на рабочие места (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, распределённого на рабочие места"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  GROUP BY "";


  # 5. получившие ответ оператора
  CREATE TABLE irda.tmp_09_3_5 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # голосовые
  INSERT INTO irda.tmp_09_3_5
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений, получивших ответ оператора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ оператора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получившего ответ оператора"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  AND v_oper>""
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_5
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений, получивших ответ оператора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ оператора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получившего ответ оператора"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  AND v_oper>""
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_5
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений, получивших ответ оператора", SUM(dur) AS "Общая продолжительность соединений, получивших ответ оператора (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений, получивших ответ оператора (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения, получившего ответ оператора"
  FROM irda.tmp_09_2
  WHERE
  srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND dur>0
  AND rm>0
  AND v_oper>""
  GROUP BY "";


  # 6. с длительностью от 3 секунд или был выдан номер телефона
  CREATE TABLE irda.tmp_09_3_6 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity int(13) unsigned default NULL,
  call_sumtime_in_sec int(13) unsigned default NULL,
  call_sumtime_in_min_div_60 int(13) unsigned default NULL,
  call_sumtime_in_min_each int(13) unsigned default NULL,
  call_average_time decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  # голосовые
  INSERT INTO irda.tmp_09_3_6
  SELECT ddi AS "Номер услуги", "0", "0", "0", COUNT(*) AS "Количество соединений с длительностью от 3 секунд", SUM(dur) AS "Общая продолжительность соединений с длительностью от 3 секунд (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения с длительностью от 3 секунд"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND(dur>2 OR izgnum>"")
  AND rm>0
  AND v_oper>""
  GROUP BY ddi
  ORDER BY "Номер услуги";

  INSERT INTO irda.tmp_09_3_6
  SELECT "Итого:" AS "Номер услуги", "0", "1", "0", COUNT(*) AS "Количество соединений с длительностью от 3 секунд", SUM(dur) AS "Общая продолжительность соединений с длительностью от 3 секунд (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения с длительностью от 3 секунд"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND(dur>2 OR izgnum>"")
  AND rm>0
  AND v_oper>""
  GROUP BY "";

  # общий итог
  INSERT INTO irda.tmp_09_3_6
  SELECT "Всего:" AS "Номер услуги", "0", "0", "1", COUNT(*) AS "Количество соединений с длительностью от 3 секунд", SUM(dur) AS "Общая продолжительность соединений с длительностью от 3 секунд (в секундах)", CEILING(SUM(dur)/60) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (секунды/60))", SUM(CEILING(dur/60)) AS "Общая продолжительность соединений с длительностью от 3 секунд (в минутах (сумма длительностей звонков, округлённых до минут))", SUM(dur)/COUNT(*) AS "Среднее время соединения с длительностью от 3 секунд"
  FROM irda.tmp_09_2
  WHERE srv=0 AND (ddi IN("109", "190", "193", "199", "9910911", "99190", "99193", "9919911") OR (ddi IN("130", "2003498") AND ((((vrijeme BETWEEN "08:30:00" AND "19:59:59") AND WEEKDAY(datum) IN(0,1,2,3,4)) OR ((vrijeme BETWEEN "09:00:00" AND "14:59:59") AND WEEKDAY(datum)=5)))))
  AND v_mreza>""
  AND(dur>2 OR izgnum>"")
  AND rm>0
  AND v_oper>""
  GROUP BY "";

  SELECT * FROM irda.tmp_09_3_1 UNION
  SELECT * FROM irda.tmp_09_3_2 UNION
  SELECT * FROM irda.tmp_09_3_3 UNION
  SELECT * FROM irda.tmp_09_3_4 UNION
  SELECT * FROM irda.tmp_09_3_5 UNION
  SELECT * FROM irda.tmp_09_3_6;

  SELECT
  a.service,
  a.call_quantity, a.call_sumtime_in_sec, a.call_sumtime_in_min_div_60, a.call_sumtime_in_min_each, a.call_average_time,
  b.call_quantity, b.call_sumtime_in_sec, b.call_sumtime_in_min_div_60, b.call_sumtime_in_min_each, b.call_average_time,
  c.call_quantity, c.call_sumtime_in_sec, c.call_sumtime_in_min_div_60, c.call_sumtime_in_min_each, c.call_average_time,
  d.call_quantity, d.call_sumtime_in_sec, d.call_sumtime_in_min_div_60, d.call_sumtime_in_min_each, d.call_average_time,
  e.call_quantity, e.call_sumtime_in_sec, e.call_sumtime_in_min_div_60, e.call_sumtime_in_min_each, e.call_average_time,
  f.call_quantity, f.call_sumtime_in_sec, f.call_sumtime_in_min_div_60, f.call_sumtime_in_min_each, f.call_average_time
  FROM irda.tmp_09_3_1 a
  LEFT JOIN irda.tmp_09_3_2 b ON b.service=a.service
  LEFT JOIN irda.tmp_09_3_3 c ON c.service=a.service
  LEFT JOIN irda.tmp_09_3_4 d ON d.service=a.service
  LEFT JOIN irda.tmp_09_3_5 e ON e.service=a.service
  LEFT JOIN irda.tmp_09_3_6 f ON f.service=a.service
  WHERE
  a.is_autoservice!="1" AND a.is_summaryrow!="1" AND a.is_globalsummaryrow!="1" AND
  b.is_autoservice!="1" AND b.is_summaryrow!="1" AND b.is_globalsummaryrow!="1" AND
  c.is_autoservice!="1" AND c.is_summaryrow!="1" AND c.is_globalsummaryrow!="1" AND
  d.is_autoservice!="1" AND d.is_summaryrow!="1" AND d.is_globalsummaryrow!="1" AND
  e.is_autoservice!="1" AND e.is_summaryrow!="1" AND e.is_globalsummaryrow!="1" AND
  f.is_autoservice!="1" AND f.is_summaryrow!="1" AND f.is_globalsummaryrow!="1"
  ORDER BY a.service;

  DROP TABLE IF EXISTS irda.tmp_09_4;
  CREATE TABLE irda.tmp_09_4 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,

  call_quantity_part1 int(13) unsigned default NULL,
  call_sumtime_in_sec_part1 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part1 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part1 int(13) unsigned default NULL,
  call_average_time_part1 decimal(13,2) unsigned default NULL,

  call_quantity_part2 int(13) unsigned default NULL,
  call_sumtime_in_sec_part2 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part2 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part2 int(13) unsigned default NULL,
  call_average_time_part2 decimal(13,2) unsigned default NULL,

  call_quantity_part3 int(13) unsigned default NULL,
  call_sumtime_in_sec_part3 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part3 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part3 int(13) unsigned default NULL,
  call_average_time_part3 decimal(13,2) unsigned default NULL,

  call_quantity_part4 int(13) unsigned default NULL,
  call_sumtime_in_sec_part4 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part4 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part4 int(13) unsigned default NULL,
  call_average_time_part4 decimal(13,2) unsigned default NULL,

  call_quantity_part5 int(13) unsigned default NULL,
  call_sumtime_in_sec_part5 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part5 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part5 int(13) unsigned default NULL,
  call_average_time_part5 decimal(13,2) unsigned default NULL,

  call_quantity_part6 int(13) unsigned default NULL,
  call_sumtime_in_sec_part6 int(13) unsigned default NULL,
  call_sumtime_in_min_div_60_part6 int(13) unsigned default NULL,
  call_sumtime_in_min_each_part6 int(13) unsigned default NULL,
  call_average_time_part6 decimal(13,2) unsigned default NULL
  ) TYPE=MyISAM;

  INSERT INTO irda.tmp_09_4 (service) VALUES ("188");

  SELECT call_quantity, call_sumtime_in_sec, call_sumtime_in_min_div_60, call_sumtime_in_min_each, call_average_time
  FROM irda.tmp_09_3_1
  WHERE service="188" AND is_autoservice="1" AND is_summaryrow="0" AND is_globalsummaryrow="0";

  SELECT call_quantity, call_sumtime_in_sec, call_sumtime_in_min_div_60, call_sumtime_in_min_each, call_average_time
  FROM irda.tmp_09_3_4
  WHERE service="188" AND is_autoservice="1" AND is_summaryrow="0" AND is_globalsummaryrow="0";
  }

// q:=mysql_error(Configuration.StatServer.hConnection);
// DROP TABLE IF EXISTS irda.tmp_09_1, irda.tmp_09_2;
// SELECT ddi, count(*) FROM irda.tmp_09_1 GROUP BY ddi;

// DROP TABLE IF EXISTS irda.tmp_09_1, irda.tmp_09_2, irda.tmp_09_3_1, irda.tmp_09_3_2, irda.tmp_09_3_3, irda.tmp_09_3_4, irda.tmp_09_3_5, irda.tmp_09_3_6, irda.tmp_09_4;


{

  DROP TABLE IF EXISTS irda.tmp_09_5;
  CREATE TABLE irda.tmp_09_5 (
  service char(32) NOT NULL default "",
  is_autoservice enum("0","1") default NULL,
  is_summaryrow enum("0","1") default NULL,
  is_globalsummaryrow enum("0","1") default NULL,
  call_quantity_part1 int(13) unsigned default NULL,
  call_percent_part1 float(13,2) default NULL,
  call_quantity_part2 int(13) unsigned default NULL,
  call_percent_part2 float(13,2) default NULL,
  call_quantity_part3 int(13) unsigned default NULL,
  call_percent_part3 float(13,2) default NULL,
  call_quantity_part4 int(13) unsigned default NULL,
  call_percent_part4 float(13,2) default NULL,
  call_quantity_part5 int(13) unsigned default NULL,
  call_percent_part5 float(13,2) default NULL
  ) TYPE=MyISAM;

  INSERT INTO irda.tmp_09_5

  SELECT
  # Номер услуги
  service AS "Номер услуги",
  is_autoservice,
  is_summaryrow,
  is_globalsummaryrow,

  # Количество отказов на этапе получения ответа СТ-платформы
  call_quantity_part1-call_quantity_part2 AS "Количество отказов на этапе получения ответа СТ-платформы",
  # Процент отказов на этапе получения ответа СТ-платформы
  IF(call_quantity_part1>0,
  (100*(1-(call_quantity_part2/call_quantity_part1)))
  , "0.00") AS "Процент отказов на этапе получения ответа СТ-платформы",

  # Количество отказов на этапе запуска автоинформатора
  call_quantity_part2-call_quantity_part3 AS "Количество отказов на этапе запуска автоинформатора",
  # Процент отказов на этапе запуска автоинформатора
  IF(call_quantity_part1>0,
  (100*(1-(call_quantity_part3/call_quantity_part1)))-
  (100*(1-(call_quantity_part2/call_quantity_part1)))
  , "0.00") AS "Процент отказов на этапе запуска автоинформатора",

  # Количество отказов на этапе распределения на рабочее место
  IF(is_autoservice="0", IF(is_globalsummaryrow="1", "+", call_quantity_part3-call_quantity_part4), "-") AS "Количество отказов на этапе распределения на рабочее место",
  # Процент отказов на этапе распределения на рабочее место
  IF(is_globalsummaryrow="1",
  "+",
  IF(is_autoservice="0",
  IF(call_quantity_part1>0,
  ( (100*(1-(call_quantity_part4/call_quantity_part1))) )-

  ( (100*(1-(call_quantity_part3/call_quantity_part1)))-
  (100*(1-(call_quantity_part2/call_quantity_part1))) )-

  ( (100*(1-(call_quantity_part2/call_quantity_part1))) )
  , "-")
  , "0.00")
  ) AS "Процент отказов на этапе распределения на рабочее место",

  # Количество отказов на этапе подтверждения соединения
  IF(is_autoservice="0", IF(is_globalsummaryrow="1", "+", call_quantity_part4-call_quantity_part5), "-") AS "Количество отказов на этапе подтверждения соединения",
  # Процент отказов на этапе подтверждения соединения
  IF(is_globalsummaryrow="1", "+",
  IF(is_autoservice="0",
  IF(call_quantity_part1>0,
  ( (100*(1-(call_quantity_part5/call_quantity_part1))) )-
  (

  ( (100*(1-(call_quantity_part4/call_quantity_part1))) )-

  ( (100*(1-(call_quantity_part3/call_quantity_part1)))-
  (100*(1-(call_quantity_part2/call_quantity_part1))) )-

  ( (100*(1-(call_quantity_part2/call_quantity_part1))) )
  )-
  ( (100*(1-(call_quantity_part3/call_quantity_part1)))-
  (100*(1-(call_quantity_part2/call_quantity_part1))) )-
  ( (100*(1-(call_quantity_part2/call_quantity_part1))) )
  , "0.00")
  , "-")
  ) AS "Процент отказов на этапе подтверждения соединения",

  # Итоговое количество отказов
  IF(is_globalsummaryrow="1", "+", IF(is_autoservice="0", call_quantity_part1-call_quantity_part5, call_quantity_part1-call_quantity_part3)) AS "Итоговое количество отказов",

  # Итоговый процент отказов
  IF(is_globalsummaryrow="1", "+",
  IF(call_quantity_part1>0,
  IF(is_autoservice="0",

  # голосовые
  (100*(1-(call_quantity_part5/call_quantity_part1))),
  # автоинформаторы
  (100*(1-(call_quantity_part3/call_quantity_part1)))

  ),
  "0.00")
  ) AS "Итоговый процент отказов"

  FROM irda.tmp_09_4_april
  ORDER BY is_globalsummaryrow, is_autoservice, is_summaryrow, service;


  SELECT call_quantity_part3, call_percent_part3, call_quantity_part4, call_percent_part4
  FROM irda.tmp_09_5
  WHERE is_summaryrow="1" AND is_autoservice="0" AND is_globalsummaryrow="0";

  SELECT SUM(call_quantity_part5)
  FROM irda.tmp_09_5
  WHERE is_summaryrow="1" AND is_globalsummaryrow="0";

  UPDATE irda.tmp_09_5
  SET
  call_quantity_part3="27483",
  call_percent_part3="1.98",
  call_quantity_part4="19340",
  call_percent_part4="1.39",
  call_quantity_part5="511027"
  WHERE is_summaryrow="0" AND is_autoservice="0" AND is_globalsummaryrow="1";

  SELECT
  IF(a.call_quantity_part1>0,
  (100*(b.call_quantity_part5/a.call_quantity_part1))
  , "0.00")
  FROM irda.tmp_09_4_april a
  LEFT JOIN irda.tmp_09_5 b ON b.service=a.service AND b.is_summaryrow=a.is_summaryrow AND b.is_autoservice=a.is_autoservice AND b.is_globalsummaryrow=a.is_globalsummaryrow
  WHERE a.is_globalsummaryrow="1";

  UPDATE irda.tmp_09_5
  SET call_percent_part5="19.95"
  WHERE is_summaryrow="0" AND is_autoservice="0" AND is_globalsummaryrow="1";

  }

(*

function TMainForm.Do_SIC_03(const aStartDate, aStopDate: TDate; const aNetIndex: integer; const aSilentYes, aOpenWithBrowser: boolean): boolean;
const
  LogGroupGUID: string='{99A443F4-4D52-42DE-AD56-0292038528BA}';
var
  q, sErrorMessage: string;
  bError: boolean;
  i, j: integer;
  ResultSet: PMYSQL_RES;
  ResultRow: PMYSQL_ROW;

  wStartDay, wStartMonth, wStartYear, wStopDay, wStopMonth, wStopYear: word;
  sShortStartDate, sShortStopDate, sSQLFormatStartDate, sSQLFormatStopDate, sLongStartDate, sLongStopDate: string;
  iYear: integer;
  sHTML, sNet: string;
  sAbonentType: string;

  i109_DayCalls, i109_NightCalls, i188_Calls, i192_Calls, i195_Calls, i175_Calls, i175_Minutes, i190_Calls, i190_Minutes, i191_Calls, i191_Minutes, i193_Calls, i193_Minutes, i194_Calls, i194_Minutes, i196_Calls, i196_Minutes, i197_Calls,
    i197_Minutes: integer;

  f109_DayTarif, f109_NightTarif, f188_Tarif, f192_Tarif, f195_Tarif, f175_Tarif, f190_Tarif, f191_Tarif, f193_Tarif, f194_Tarif, f196_Tarif, f197_Tarif: double;

  sFileFolder, sFileName: string;
//  aFileTypeItem: TFileTypeItem;
  sReportPeriod: string;
  cReportSuffix: char;
  sReportCode: string;
  Thread_Do_SIC_03: TThread_Do_SIC_03;
begin
//  // создание нового потока в котором будут выполняться все действия по формированию отчёта
//  Thread_Do_SIC_03:=TThread_Do_SIC_03.Create(True);
//  Thread_Do_SIC_03.Priority:=tpLower;
//  Thread_Do_SIC_03.FreeOnTerminate:=True;
//  // передача параметров в поток
//  Thread_Do_SIC_03.StartDate:=aStartDate;
//  Thread_Do_SIC_03.StopDate:=aStopDate;
//  Thread_Do_SIC_03.NetIndex:=aNetIndex;
//  Thread_Do_SIC_03.SilentYes:=aSilentYes;
//  Thread_Do_SIC_03.OpenWithBrowser:=aOpenWithBrowser;
//  Thread_Do_SIC_03.ConfigurationCopy:=Configuration;
//  // запускаем выполнение потока
//  Thread_Do_SIC_03.Start;

  ProcedureHeader('Процедура формирования отчёта по форме № СИЦ-03-...', LogGroupGUID);
  bError:=False;
  Start_ActionTimer(LogGroupGUID);

  wStartDay:=DayOf(aStartDate);
  wStartMonth:=MonthOf(aStartDate);
  wStartYear:=YearOf(aStartDate);
  wStopDay:=DayOf(aStopDate);
  wStopMonth:=MonthOf(aStopDate);
  wStopYear:=YearOf(aStopDate);

  sShortStartDate:=FormatDateTime('dd.mm.yyyy', aStartDate);
  sShortStopDate:=FormatDateTime('dd.mm.yyyy', aStopDate);
  sSQLFormatStartDate:=FormatDateTime('yyyy-mm-dd', aStartDate);
  sSQLFormatStopDate:=FormatDateTime('yyyy-mm-dd', aStopDate);
  sLongStartDate:=IntToStr(wStartDay)+' '+saMonths2[wStartMonth]+' '+IntToStr(wStartYear)+' года';
  sLongStopDate:=IntToStr(wStopDay)+' '+saMonths2[wStopMonth]+' '+IntToStr(wStopYear)+' года';

  cReportSuffix:=GetReportSuffix(aStartDate, aStopDate);
  case cReportSuffix of
    'Г':
      sReportPeriod:=FormatDateTime('yyyy год', aStartDate);
    'К':
      sReportPeriod:=saQuarters[wStopMonth div 3]+' квартал '+IntToStr(wStartYear)+' года';
    'М':
      sReportPeriod:=saMonths1[wStartMonth]+' '+IntToStr(wStartYear)+' года';
    'Н':
      sReportPeriod:=FormatDateTime('dd.mm.yyyy', aStartDate)+'-'+FormatDateTime('dd.mm.yyyy', aStopDate);
    'Д':
      sReportPeriod:=sLongStartDate;
    'П':
      sReportPeriod:=FormatDateTime('dd.mm.yyyy', aStartDate)+'-'+FormatDateTime('dd.mm.yyyy', aStopDate);
  end;

  i109_DayCalls:=0;
  f109_DayTarif:=-1;
  i109_NightCalls:=0;
  f109_NightTarif:=-1;
  i188_Calls:=0;
  f188_Tarif:=-1;
  i192_Calls:=0;
  f192_Tarif:=-1;
  i195_Calls:=0;
  f195_Tarif:=-1;
  i175_Calls:=0;
  i175_Minutes:=0;
  f175_Tarif:=-1;
  i190_Calls:=0;
  i190_Minutes:=0;
  f190_Tarif:=-1;
  i191_Calls:=0;
  i191_Minutes:=0;
  f191_Tarif:=-1;
  i193_Calls:=0;
  i193_Minutes:=0;
  f193_Tarif:=-1;
  i194_Calls:=0;
  i194_Minutes:=0;
  f194_Tarif:=-1;
  i196_Calls:=0;
  i196_Minutes:=0;
  f196_Tarif:=-1;
  i197_Calls:=0;
  i197_Minutes:=0;
  f197_Tarif:=-1;

  case aNetIndex of
    0:
      begin
        sNet:='СП&nbsp;&laquo;МЦС&raquo;';
        f109_DayTarif:=USD_TARIF_MCS_109_DAY;
        f109_NightTarif:=USD_TARIF_MCS_109_NIGHT;
        f188_Tarif:=USD_TARIF_MCS_188;
        f192_Tarif:=USD_TARIF_MCS_192;
        f195_Tarif:=USD_TARIF_MCS_195;
        f175_Tarif:=USD_TARIF_MCS_175;
        f190_Tarif:=USD_TARIF_MCS_190;
        f191_Tarif:=USD_TARIF_MCS_191;
        f193_Tarif:=USD_TARIF_MCS_193;
        f194_Tarif:=USD_TARIF_MCS_194;
        f196_Tarif:=USD_TARIF_MCS_196;
        f197_Tarif:=USD_TARIF_MCS_197;
        sAbonentType:='МЦС';
      end;
    1:
      begin
        sNet:='СООО&nbsp;&laquo;МТС&raquo;';
        f109_DayTarif:=USD_TARIF_MTS_109_DAY;
        f109_NightTarif:=USD_TARIF_MTS_109_NIGHT;
        f188_Tarif:=USD_TARIF_MTS_188;
        f192_Tarif:=USD_TARIF_MTS_192;
        f195_Tarif:=USD_TARIF_MTS_195;
        f175_Tarif:=USD_TARIF_MTS_175;
        f190_Tarif:=USD_TARIF_MTS_190;
        f191_Tarif:=USD_TARIF_MTS_191;
        f193_Tarif:=USD_TARIF_MTS_193;
        f194_Tarif:=USD_TARIF_MTS_194;
        f196_Tarif:=USD_TARIF_MTS_196;
        f197_Tarif:=USD_TARIF_MTS_197;
        sAbonentType:='МТС';
      end;
    2:
      begin
        sNet:='ЗАО&nbsp;&laquo;БеСТ&raquo;';
        f109_DayTarif:=USD_TARIF_BEST_109_DAY;
        f109_NightTarif:=USD_TARIF_BEST_109_NIGHT;
        f188_Tarif:=USD_TARIF_BEST_188;
        f192_Tarif:=USD_TARIF_BEST_192;
        f195_Tarif:=USD_TARIF_BEST_195;
        f175_Tarif:=USD_TARIF_BEST_175;
        f190_Tarif:=USD_TARIF_BEST_190;
        f191_Tarif:=USD_TARIF_BEST_191;
        f193_Tarif:=USD_TARIF_BEST_193;
        f194_Tarif:=USD_TARIF_BEST_194;
        f196_Tarif:=USD_TARIF_BEST_196;
        f197_Tarif:=USD_TARIF_BEST_197;
        sAbonentType:='БеСТ';
      end;
    3:
      begin
        sNet:='СП&nbsp;&laquo;БелСел&raquo;';
        f109_DayTarif:=USD_TARIF_BELSEL_109_DAY;
        f109_NightTarif:=USD_TARIF_BELSEL_109_NIGHT;
        f188_Tarif:=USD_TARIF_BELSEL_188;
        f192_Tarif:=USD_TARIF_BELSEL_192;
        f195_Tarif:=USD_TARIF_BELSEL_195;
        f175_Tarif:=USD_TARIF_BELSEL_175;
        f190_Tarif:=USD_TARIF_BELSEL_190;
        f191_Tarif:=USD_TARIF_BELSEL_191;
        f193_Tarif:=USD_TARIF_BELSEL_193;
        f194_Tarif:=USD_TARIF_BELSEL_194;
        f196_Tarif:=USD_TARIF_BELSEL_196;
        f197_Tarif:=USD_TARIF_BELSEL_197;
        sAbonentType:='БелСел';
      end;
  end;

  // подключаемся к MySQL-серверу, на котором находится таблица пользователей
  if not bError then
    MySQL_OpenConnection(LogGroupGUID, Configuration.OverseerServer, bError, sErrorMessage);

  // проверяем наличие таблицы с данными в базе данных
  if not bError then
    MySQL_CheckTableExistance(LogGroupGUID, Configuration.OverseerServer, Configuration.OverseerServer.sMySQLDatabase, bError, sErrorMessage, 'rep1');

  // блокирование таблицы
  if not bError then
    MySQL_LockTables(LogGroupGUID, Configuration.OverseerServer, bError, sErrorMessage, Configuration.OverseerServer.sMySQLDatabase+'.rep1 READ');

  // получение данных из БД
  if not bError then
    with Configuration.OverseerServer do
      begin
        LogThis('>> Выполняется операция получения данных из таблицы базы данных...', LogGroupGUID, lmtInfo);
        if not bConnected then
          GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
        else
          begin
            if mysql_ping(hConnection)<>0 then
              GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
            else
              begin
                q:='SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("109") AND timetype="d" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("109") AND timetype="n" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("188") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("192") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("195") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("175") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("190") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("191") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("193") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("194") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("196") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "" UNION '+
                  'SELECT service, timetype, SUM(served_calls), CEILING(SUM(served_calls_duration_in_seconds)/60), SUM(served_calls_duration_in_seconds) '+'FROM '+sMySQLDatabase+'.rep1 WHERE service in("197") AND timetype="" AND abonent_type = "'+
                  sAbonentType+'" AND date_of_calls BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" GROUP BY "";';
                LogThis(q, LogGroupGUID, lmtSQL);
                if mysql_real_query(hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
                  GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
                else
                  begin
                    LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
                    ResultSet:=mysql_store_result(hConnection);
                    if ResultSet=nil then
                      GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', sErrorMessage, bError)
                    else
                      begin
                        LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
                        i:=mysql_num_rows(ResultSet);
                        LogThis('Количество строк выборки равно '+IntToStr(i)+'.', LogGroupGUID, lmtInfo);
                        if i<0 then
                          GenerateError('Возникла ошибка при получении количества срок результирующей выборки!', sErrorMessage, bError)
                        else
                          begin
                            ProgressBar1.Position:=ProgressBar1.Min;
                            ProgressBar1.Max:=i;
                            for j:=0 to i-1 do
                              if bError then
                                Break
                              else
                                begin
                                  LogThis('Получение очередной строки выборки ('+IntToStr(j)+').', LogGroupGUID, lmtInfo);
                                  ResultRow:=mysql_fetch_row(ResultSet);
                                  if ResultRow=nil then
                                    GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(j)+')!', sErrorMessage, bError)
                                  else
                                    begin
                                      LogThis('Операция получения очередной строки выборки ('+IntToStr(j)+') прошла успешно.', LogGroupGUID, lmtInfo);
                                      if string(ResultRow[0])='109' then
                                        begin
                                          if string(ResultRow[1])='d' then
                                            i109_DayCalls:=StrToIntDef(string(ResultRow[2]), -1);
                                          if string(ResultRow[1])='n' then
                                            i109_NightCalls:=StrToIntDef(string(ResultRow[2]), -1);
                                        end
                                      else
                                        if string(ResultRow[1])='' then
                                          begin
                                            if string(ResultRow[0])='188' then
                                              i188_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                            if string(ResultRow[0])='192' then
                                              i192_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                            if string(ResultRow[0])='195' then
                                              i195_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                            if string(ResultRow[0])='175' then
                                              begin
                                                i175_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i175_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='190' then
                                              begin
                                                i190_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i190_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='191' then
                                              begin
                                                i191_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i191_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='193' then
                                              begin
                                                i193_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i193_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='194' then
                                              begin
                                                i194_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i194_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='196' then
                                              begin
                                                i196_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i196_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                            if string(ResultRow[0])='197' then
                                              begin
                                                i197_Calls:=StrToIntDef(string(ResultRow[2]), -1);
                                                i197_Minutes:=StrToIntDef(string(ResultRow[3]), -1);
                                              end;
                                          end;
                                      ProgressBar1.StepIt;
                                    end;
                                end;
                          end;
                        mysql_free_result(ResultSet);
                        LogThis('Освобождение ресурсов, занятых результатом выборки, выполнено.', LogGroupGUID, lmtInfo);
                      end;
                  end;
              end;
          end;
        LogThis('<< Выполнение операции получения данных таблицы базы данных завершено.', LogGroupGUID, lmtInfo);
      end;

  // разблокирование таблиц
  if not bError then
    MySQL_UnlockTables(LogGroupGUID, Configuration.OverseerServer, bError, sErrorMessage);

  // отключение от MySQL-сервера по окончанию работы текущей процедуры с базами данных - даже в случае ошибки
  MySQL_CloseConnection(LogGroupGUID, Configuration.OverseerServer, bError, sErrorMessage);

  if not bError then
    begin
      // формирование текста HTML-файла
      sReportCode:='СИЦ-03-'+UpperCase(sAbonentType)+'-'+cReportSuffix;
      sHTML:=sHTML+'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">'+#13#10;
      sHTML:=sHTML+'<HTML>'+#13#10;
      sHTML:=sHTML+'  <HEAD>'+#13#10;
      sHTML:=sHTML+'    <TITLE>Сведения о входящем трафике в сеть РУП "Белтелеком" на платные справочные службы от сети '+StringReplace(StringReplace(StringReplace(sNet, '&laquo;', '"', [rfReplaceAll]), '&raquo;', '"', [rfReplaceAll]), '&nbsp;',
        ' ', [rfReplaceAll])+' за период с '+sLongStartDate+' по '+sLongStopDate+'</TITLE>'+#13#10;
      sHTML:=sHTML+'    <META CONTENT="no-cache" HTTP-EQUIV="pragma">'+#13#10;
      sHTML:=sHTML+'    <META CONTENT="no-cache" HTTP-EQUIV="cache-control">'+#13#10;
      sHTML:=sHTML+'    <META CONTENT="Dynamic" NAME="Document-state">'+#13#10;
      sHTML:=sHTML+'    <META content="text/html; charset=Windows-1251" http-equiv="Content-Type">'+#13#10;
      sHTML:=sHTML+'    <STYLE MEDIA="screen, print" TYPE="text/css">'+#13#10;
      sHTML:=sHTML+'      *       {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 8pt;}'+#13#10;
      sHTML:=sHTML+'      BODY    {font-size: 8pt; background-color: white; margin: 5px; color: #000000;}'+#13#10;
      sHTML:=sHTML+'      P       {font-size: inherit; text-indent: 0; margin-top: 2px; margin-bottom: 2px; text-align: justify; font-weight: normal; color: #000000; background: transparent;}'+#13#10;
      sHTML:=sHTML+'      A       {font-size: inherit; text-align: left; font-weight: bold; background: transparent; text-decoration:none;}'+#13#10;
      sHTML:=sHTML+'      H1      {font-size: 13pt; margin-top: 5px; margin-bottom: 5px; text-align: center; font-weight: bold; color: #000000; background-color: transparent; padding-top: 3px; padding-bottom: 3px;}'+#13#10;
      sHTML:=sHTML+'      CAPTION {font-size: 13pt; margin-top: 5px; margin-bottom: 5px; text-align: center; font-weight: bold; color: #000000; background-color: transparent; padding-top: 3px; padding-bottom: 3px;}'+#13#10;
      sHTML:=sHTML+'      TABLE   {caption-side: top; table-layout: fixed; empty-cells: show; font-size: 8pt; float: none; clear: both; border-collapse: collapse; background-color: transparent;}'+#13#10;
      sHTML:=sHTML+'      TBODY   {vertical-align: top;}'+#13#10;
      sHTML:=sHTML+'      TD      {font-weight: normal; padding: 0 5px;}'+#13#10;
      sHTML:=sHTML+'      TH      {font-weight: bold; padding: 0 5px;}'+#13#10;
      sHTML:=sHTML+'    </STYLE>'+#13#10;
      sHTML:=sHTML+'  </HEAD>'+#13#10;
      sHTML:=sHTML+'  <BODY>'+#13#10;
      sHTML:=sHTML+'    <CENTER>'+#13#10;
      sHTML:=sHTML+'    <TABLE BORDER="1" WIDTH="1000px" ALIGN="CENTER" STYLE="border-width: 0; border-style: solid; border-color: #FFFFFF; font-size: 8pt;">'+#13#10;
      sHTML:=sHTML+'      <TBODY STYLE="vertical-align: top;">'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="MIDDLE" STYLE="font-weight: bold;">'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="95px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="135px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="95px" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR STYLE="font-size: 6pt;"><TD COLSPAN="4" STYLE="font-weight: bold; border-color: #FFFFFF; border-style: solid; border-width: 0 0 1px 0; font-size: 10pt;">Форма № '+sReportCode+'</TD>'+
        '<TD COLSPAN="4" STYLE="border-color: gray; border-style: solid; border-width: 0 0 1px 0; text-align: right;">'+'Справочно-информационный цех филиала &laquo;МГТС&raquo; РУП &laquo;Белтелеком&raquo;</TD></TR>'+#13#10;
      sHTML:=sHTML+'        <TR><TD COLSPAN="8" STYLE="font-weight: bold; padding-top: 0.5cm; padding-bottom: 0.3cm; border-color: #FFFFFF; border-style: solid; '+
        'border-width: 0; font-size: 13pt; margin-top: 5px; margin-bottom: 5px; text-align: center; font-weight: bold; color: #000000; background-color: transparent;">'+
        'Сведения&nbsp;о&nbsp;входящем&nbsp;трафике в&nbsp;сеть&nbsp;РУП&nbsp;&laquo;Белтелеком&raquo; на&nbsp;платные&nbsp;справочные&nbsp;службы от&nbsp;сети&nbsp;'+sNet+'</TD></TR>'+#13#10;
      sHTML:=sHTML+'        <TR><TD COLSPAN="6" STYLE="border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: right; font-size: 10pt;">Период:</TD>'+
        '<TD COLSPAN="2" STYLE="border-color: #000000; border-style: solid; border-width: 1px; text-align: center; font-size: 10pt; font-weight: bold;">'+sReportPeriod+'</TD></TR>'+#13#10;
      sHTML:=sHTML+'        <TR><TD COLSPAN="6" STYLE="font-weight: bold; padding-bottom: 0.5cm; padding-left: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 10pt;">'+
        '5. Входящий трафик на платные справочные службы РУП &laquo;Белтелеком&raquo;</TD>'+
        '<TD COLSPAN="2" STYLE="font-weight: bold; padding-bottom: 0.5cm; padding-left: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 10pt;">&nbsp;</TD></TR>'+#13#10;
      sHTML:=sHTML+'        <TR><TD COLSPAN="8" STYLE="padding-bottom: 0.5cm; padding-left: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 9pt;">5.1. Услуги со способом взаиморасчётов за факт пользования</TD></TR>'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="MIDDLE" STYLE="font-weight: bold;">'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 2px;" ROWSPAN="2">Служба</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 1px 0;" COLSPAN="2">Количество соединений</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 1px 0;" COLSPAN="2">Тариф, долларов США</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 1px 0;" COLSPAN="3">Сумма, долларов США</TH>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="MIDDLE" STYLE="font-weight: bold;">'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;">Дневное время*</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">Ночное время**</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;">Дневное время*</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">Ночное время**</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;">Дневное время*</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;">Ночное время**</TH>'+#13#10;
      sHTML:=sHTML+'          <TH ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">Всего</TH>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 2px;"><B>I</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;"><B>II</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>III</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;"><B>IV</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>V</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;"><B>VI</B><BR><FONT STYLE="font-size: 6pt;">(ст. II * ст. IV)</FONT></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;"><B>VII</B><BR><FONT STYLE="font-size: 6pt;">(ст. III * ст. V)</FONT></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>VIII</B><BR><FONT STYLE="font-size: 6pt;">(ст. VI + ст. VII)</FONT></TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">109</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;">'+IntToStr(i109_DayCalls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i109_NightCalls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;">'+FormatFloat('#0.##########', f109_DayTarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f109_NightTarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;">'+FormatFloat('#0.##########', i109_DayCalls*f109_DayTarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;">'+FormatFloat('#0.##########', i109_NightCalls*f109_NightTarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i109_DayCalls*f109_DayTarif+i109_NightCalls*f109_NightTarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">188</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;" COLSPAN="2">'+IntToStr(i188_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;" COLSPAN="2">'+FormatFloat('#0.##########', f188_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;" COLSPAN="2">'+FormatFloat('#0.##########', i188_Calls*f188_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i188_Calls*f188_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">192</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;" COLSPAN="2">'+IntToStr(i192_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;" COLSPAN="2">'+FormatFloat('#0.##########', f192_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 1px 0;" COLSPAN="2">'+FormatFloat('#0.##########', i192_Calls*f192_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i192_Calls*f192_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 2px;">195</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;" COLSPAN="2">'+IntToStr(i195_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;" COLSPAN="2">'+FormatFloat('#0.##########', f195_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 1px 2px 0;" COLSPAN="2">'+FormatFloat('#0.##########', i195_Calls*f195_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">'+FormatFloat('#0.##########', i195_Calls*f195_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'      </TBODY>'+#13#10;
      sHTML:=sHTML+'    </TABLE>'+#13#10;
      sHTML:=sHTML+'    <TABLE BORDER="1" WIDTH="1000" ALIGN="CENTER" STYLE="border: 0 solid #FFFFFF; font-size: 8pt;">'+#13#10;
      sHTML:=sHTML+'      <TBODY STYLE="vertical-align: top;">'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="MIDDLE" STYLE="font-weight: bold;">'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="200" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="200" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="200" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="200" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'          <TH WIDTH="*" ALIGN="CENTER" STYLE="padding: 0px; border-color: #000000; border-style: solid; border-width: 0;"></TH>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR>'+#13#10;
      sHTML:=sHTML+'          <TD COLSPAN="5" STYLE="padding: 0.5cm 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 9pt;">5.2. Услуги со способом взаиморасчётов за трафик</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="MIDDLE" STYLE="font-weight: bold;">'+#13#10;
      sHTML:=sHTML+'          <TD ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 2px;">Служба</TD>'+#13#10;
      sHTML:=sHTML+'          <TD ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 0;">Количество соединений</TD>'+#13#10;
      sHTML:=sHTML+'          <TD ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 0;">Продолжительность соединений, минут</TD>'+#13#10;
      sHTML:=sHTML+'          <TD ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 0;">Тариф, долларов США</TD>'+#13#10;
      sHTML:=sHTML+'          <TD ALIGN="CENTER" STYLE="padding: 5px; border-color: #000000; border-style: solid; border-width: 2px 2px 2px 0;">Сумма, долларов США</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 2px;"><B>I</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>II</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>III</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>IV</B></TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="font-size: 7pt; padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;"><B>V</B><BR><FONT STYLE="font-size: 6pt;">(ст. III * ст. IV)</FONT></TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">175</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i175_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i175_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f175_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i175_Minutes*f175_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">190</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i190_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i190_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f190_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i190_Minutes*f190_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">191</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i191_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i191_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f191_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i191_Minutes*f191_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">193</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i193_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i193_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f193_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i193_Minutes*f193_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">194</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i194_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i194_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f194_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i194_Minutes*f194_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 2px;">196</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i196_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+IntToStr(i196_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', f196_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 1px 0;">'+FormatFloat('#0.##########', i196_Minutes*f196_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR ALIGN="CENTER">'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 2px;">197</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">'+IntToStr(i197_Calls)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">'+IntToStr(i197_Minutes)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">'+FormatFloat('#0.##########', f197_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 2px; border-color: #000000; border-style: solid; border-width: 0 2px 2px 0;">'+FormatFloat('#0.##########', i197_Minutes*f197_Tarif)+'</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR>'+#13#10;
      sHTML:=sHTML+'          <TD COLSPAN="4" STYLE="padding: 0.5cm 0 0 0; font-weight: bold; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 9pt;">Итого в пользу РУП &laquo;Белтелеком&raquo;:</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 0.5cm 0 0 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: right; font-size: 9pt; font-weight: bold;">'+FormatFloat('#0.##########',
        i109_DayCalls*f109_DayTarif+i109_NightCalls*f109_NightTarif+i188_Calls*f188_Tarif+i192_Calls*f192_Tarif+i195_Calls*f195_Tarif+i175_Minutes*f175_Tarif+i190_Minutes*f190_Tarif+i191_Minutes*f191_Tarif+i193_Minutes*f193_Tarif+i194_Minutes*
          f194_Tarif+i196_Minutes*f196_Tarif+i197_Minutes*f197_Tarif)+' долл. США</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR>'+#13#10;
      sHTML:=sHTML+'          <TD COLSPAN="4" STYLE="padding: 0; font-style: italic; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 9pt;">Курс доллара США на '+sLongStopDate+':</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: right; font-size: 9pt; font-style: italic;">бел. руб.</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR>'+#13#10;
      sHTML:=sHTML+'          <TD COLSPAN="4" STYLE="padding: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: left; font-size: 9pt;">Эквивалент в белорусских рублях:</TD>'+#13#10;
      sHTML:=sHTML+'          <TD STYLE="padding: 0; border-color: #FFFFFF; border-style: solid; border-width: 0; text-align: right; font-size: 9pt;">бел. руб.</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'        <TR VALIGN="BOTTOM" STYLE="height: 1.4cm;">'+#13#10;
      sHTML:=sHTML+'          <TD COLSPAN="5" STYLE="padding: 0; text-align: left; font-size: 6pt; border-color: #FFFFFF; border-style: solid; border-width: 0;">'+
        '<I>Примечания:</I><BR>*: ежедневное оказание услуг с 06<SUP>00</SUP> до 21<SUP>59</SUP> (для справочной службы &laquo;009&raquo;, 8-ABC-9900911)'+
        '<BR>**: ежедневное оказание услуг с 21<SUP>00</SUP> до 05<SUP>59</SUP> (для справочной службы &laquo;009&raquo;, 8-ABC-9900911)</TD>'+#13#10;
      sHTML:=sHTML+'        </TR>'+#13#10;
      sHTML:=sHTML+'      </TBODY>'+#13#10;
      sHTML:=sHTML+'    </TABLE>'+#13#10;
      sHTML:=sHTML+'    </CENTER>'+#13#10;
      sHTML:=sHTML+'  </BODY>'+#13#10;
      sHTML:=sHTML+'</HTML>'+#13#10;
      LogThis(sHTML, LogGroupGUID, lmtInfo);
    end;

  if not bError then
    if not Do_SaveReportAsHTMLAndOpen(sHTML, 'Сведения о входящем трафике в сеть РУП Белтелеком на платные справочные службы от сети '+StringReplace(StringReplace(StringReplace(sNet, '&laquo;', '', [rfReplaceAll]), '&raquo;', '', [rfReplaceAll]),
        '&nbsp;', ' ', [rfReplaceAll])+' за '+sReportPeriod+' [форма № '+sReportCode+'].htm', aOpenWithBrowser, aSilentYes) then
      GenerateError('Произошла ошибка во вложенной функции сохранения и открытия отчёта!', sErrorMessage, bError);

  Stop_ActionTimer(LogGroupGUID);
  PreFooter(Handle, bError, sErrorMessage, LogGroupGUID);
  ProcedureFooter(LogGroupGUID);

  Do_SIC_03:=not bError;
end;
*)


function _Do_SIC_04(const aStartDate, aStopDate: TDate; const aSilentYes, aOpenWithBrowser: boolean; const aGroupByPeriod: TGroupByPeriod; const bCalculateWeekFromMonday, bAllUsers, bCreateDetailedReport, bShowSQLQueries,
  bShowIdleUsers: boolean; aSelectedUserList: TStringList): boolean;
const
  LogGroupGUID: string='{B89109B1-27DE-46F3-A4B1-6D296568CE8D}';
var
  sErrorMessage: string;
  bError: boolean;
  sHTML: string;
  wStartDay, wStartMonth, wStartYear, wStopDay, wStopMonth, wStopYear: word;
  dtNow: TDateTime;
  sShortStartDate, sShortStopDate, sSQLFormatStartDate, sSQLFormatStopDate, sLongStartDate, sLongStopDate: string;
  sReportPeriod: string;
  cReportSuffix: char;
  sTableName: string;
  iRoutineCounter, iPhonesCounter: integer;
  iRowQuantity, iRowCounter: integer;
  slUserList, slPeriodList: TStringList;
  iPeriodCounter: integer;
  dtDate: TDate;
  iFullListCounter: integer;
  q: string;
  s: string;
  ResultSet: PMYSQL_RES;
  ResultRow: PMYSQL_ROW;
  sServiceName: string;
  sPeriodColumnQuery, sGroupByQuery: string;
  sPeriodColumn: string;
  sReportSuffix: string;
  iQuantityCreated, iQuantityModified, iQuantityDeleted, iQuantityRecoveried: integer;
  iQuantityCreated_UserSummary, iQuantityModified_UserSummary, iQuantityDeleted_UserSummary, iQuantityRecoveried_UserSummary: integer;
  slWeeksList: TStringList;
  iWeekCounter: integer;
  bAnyReportDataExists: boolean;
  sReportCode: string;
begin
  ProcedureHeader('Процедура формирования отчёта по форме № СИЦ-04-...', LogGroupGUID);
  bError:=False;
  sTableName:='';
  bAnyReportDataExists:=False; // если хоть какие-нить данные будут добавлены в отчёт, переменную выставляем в true, иначе выводим строку, что данные найдены не были

  wStartDay:=DayOf(aStartDate);
  wStartMonth:=MonthOf(aStartDate);
  wStartYear:=YearOf(aStartDate);
  wStopDay:=DayOf(aStopDate);
  wStopMonth:=MonthOf(aStopDate);
  wStopYear:=YearOf(aStopDate);

  sShortStartDate:=FormatDateTime('dd.mm.yyyy', aStartDate);
  sShortStopDate:=FormatDateTime('dd.mm.yyyy', aStopDate);
  sSQLFormatStartDate:=FormatDateTime('yyyy-mm-dd', aStartDate);
  sSQLFormatStopDate:=FormatDateTime('yyyy-mm-dd', aStopDate);
  sLongStartDate:=IntToStr(wStartDay)+' '+saMonths2[wStartMonth]+' '+IntToStr(wStartYear)+' года';
  sLongStopDate:=IntToStr(wStopDay)+' '+saMonths2[wStopMonth]+' '+IntToStr(wStopYear)+' года';

  cReportSuffix:=GetReportSuffix(aStartDate, aStopDate);
  case cReportSuffix of
    'Г':
      sReportPeriod:=FormatDateTime('yyyy год', aStartDate);
    'К':
      sReportPeriod:=saQuarters[wStopMonth div 3]+' квартал '+IntToStr(wStartYear)+' года';
    'М':
      sReportPeriod:=saMonths1[wStartMonth]+' '+IntToStr(wStartYear)+' года';
    'Н':
      sReportPeriod:='неделю с'+GetConditionalMessage(wStartDay=2, 'о', '')+' '+sLongStartDate+' по '+sLongStopDate;
    'Д':
      sReportPeriod:=sLongStartDate;
    'П':
      sReportPeriod:='период с'+GetConditionalMessage(wStartDay=2, 'о', '')+' '+sLongStartDate+' по '+sLongStopDate;
  end;

  case aGroupByPeriod of
    gbpHours:
      begin
        sPeriodColumn:='<BR>(час, день, месяц, год)';
        sPeriodColumnQuery:='CONCAT(TIME_FORMAT(evn_datetime, "%H"),":00:00-",TIME_FORMAT(evn_datetime, "%H"),":59:59 ", DATE_FORMAT(evn_datetime, "%d.%m.%Y"))';
        sGroupByQuery:='period';
        sReportSuffix:=cReportSuffix+'-Ч';
      end;
    gbpDays:
      begin
        sPeriodColumn:='<BR>(день, месяц, год)';
        sPeriodColumnQuery:='DATE_FORMAT(evn_datetime, "%d.%m.%Y")';
        sGroupByQuery:='period';
        sReportSuffix:=cReportSuffix+'-Д';
      end;
    gbpWeeks:
      begin
        sPeriodColumn:='<BR>(начало, конец недели)';
        if bCalculateWeekFromMonday then
          sReportSuffix:=cReportSuffix+'-НП'
        else
          sReportSuffix:=cReportSuffix+'-НД';
      end;
    gbpMonths:
      begin
        sPeriodColumn:='<BR>(месяц, год)';
        sPeriodColumnQuery:='CONCAT(IF(DATE_FORMAT(evn_datetime, "%m")=1, "январь", IF(DATE_FORMAT(evn_datetime, "%m")=2, "февраль", IF(DATE_FORMAT(evn_datetime, "%m")=3, "март", '+
          'IF(DATE_FORMAT(evn_datetime, "%m")=4, "апрель", IF(DATE_FORMAT(evn_datetime, "%m")=5, "май", IF(DATE_FORMAT(evn_datetime, "%m")=6, "июнь", IF(DATE_FORMAT(evn_datetime, "%m")=7, "июль", '+
          'IF(DATE_FORMAT(evn_datetime, "%m")=8, "август", IF(DATE_FORMAT(evn_datetime, "%m")=9, "сентябрь", IF(DATE_FORMAT(evn_datetime, "%m")=10, "октябрь", '+
          'IF(DATE_FORMAT(evn_datetime, "%m")=11, "ноябрь", IF(DATE_FORMAT(evn_datetime, "%m")=12, "декабрь", "?"))))))))))))," ", DATE_FORMAT(evn_datetime, "%Y"))';
        sGroupByQuery:='period';
        sReportSuffix:=cReportSuffix+'-М';
      end;
    gbpQuarters:
      begin
        sPeriodColumn:='<BR>(номер квартала, год)';
        sPeriodColumnQuery:='CONCAT(IF(QUARTER(evn_datetime)=1,"I",IF(QUARTER(evn_datetime)=2,"II",IF(QUARTER(evn_datetime)=3,"III",IF(QUARTER(evn_datetime)=4,"IV","?")))), " квартал ", DATE_FORMAT(evn_datetime, "%Y"))';
        sGroupByQuery:='period';
        sReportSuffix:=cReportSuffix+'-К';
      end;
    gbpYears:
      begin
        sPeriodColumn:='<BR>(год)';
        sPeriodColumnQuery:='DATE_FORMAT(evn_datetime, "%Y")';
        sGroupByQuery:='period';
        sReportSuffix:=cReportSuffix+'-Г';
      end;
  end;



  InitProgressBar(ProgressBar1, 16); // 0
  // подключение к MySQL-серверу, на котором находится таблица пользователей БД rne4
  MySQL_OpenConnection(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
  StepProgressBar(ProgressBar1); // 1

  if not bError then
    begin
      // проверка наличия таблицы пользователей в базе данных
      MySQL_CheckTableExistance(LogGroupGUID, Configuration.RNE4Server, Configuration.RNE4Server.sMySQLDatabase, bError, sErrorMessage, '_usr');
      StepProgressBar(ProgressBar1); // 2

      if not bError then
        begin
          // проверка наличия таблицы событий в базе данных
          MySQL_CheckTableExistance(LogGroupGUID, Configuration.RNE4Server, Configuration.RNE4Server.sMySQLDatabase, bError, sErrorMessage, '_evn');
          StepProgressBar(ProgressBar1); // 3

          if not bError then
            begin
              slUserList:=TStringList.Create;
              try
                // формирование списка пользователей на основе значения входящих параметров
                if bAllUsers then
                  begin
                    // блокирование таблиц
                    MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._usr READ');
                    StepProgressBar(ProgressBar1); // 4

                    if not bError then
                      begin
                        // составление списка пользователей (уникальные элементы)
                        LogThis('>> Выполняется операция составления списка пользователей...', LogGroupGUID, lmtInfo);
                        if not Configuration.RNE4Server.bConnected then
                          GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
                        else
                          begin
                            if mysql_ping(Configuration.RNE4Server.hConnection)<>0 then
                              GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
                            else
                              begin
                                q:='SELECT DISTINCT usr_fullname ' //
                                  +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                                  +'WHERE usr_erased="0" ' //
                                  +'ORDER BY usr_fullname;'; //
                                LogThis(q, LogGroupGUID, lmtSQL);
                                if mysql_real_query(Configuration.RNE4Server.hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
                                  GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
                                else
                                  begin
                                    LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
                                    ResultSet:=mysql_store_result(Configuration.RNE4Server.hConnection);
                                    if ResultSet=nil then
                                      GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', sErrorMessage, bError)
                                    else
                                      begin
                                        LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
                                        iRowQuantity:=mysql_num_rows(ResultSet);
                                        LogThis('Количество строк выборки равно '+IntToStr(iRowQuantity)+'.', LogGroupGUID, lmtInfo);
                                        if iRowQuantity<0 then
                                          GenerateError('Возникла ошибка при получении количества срок результирующей выборки!', sErrorMessage, bError)
                                        else
                                          begin
                                            LogThis('Количество строк выборки соответствует требуемому.', LogGroupGUID, lmtInfo);
                                            for iRowCounter:=0 to iRowQuantity-1 do
                                              if bError then
                                                Break
                                              else
                                                begin
                                                  LogThis('Получение очередной строки выборки ('+IntToStr(iRowCounter)+').', LogGroupGUID, lmtInfo);
                                                  ResultRow:=mysql_fetch_row(ResultSet);
                                                  if ResultRow=nil then
                                                    GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(iRowCounter)+')!', sErrorMessage, bError)
                                                  else
                                                    begin
                                                      LogThis('Операция получения очередной строки выборки ('+IntToStr(iRowCounter)+') прошла успешно.', LogGroupGUID, lmtInfo);
                                                      slUserList.Add(Trim(string(ResultRow[0])));
                                                    end;
                                                end;
                                          end;
                                        mysql_free_result(ResultSet);
                                        LogThis('Освобождение ресурсов, занятых результатом выборки, выполнено.', LogGroupGUID, lmtInfo);
                                      end;
                                  end;
                              end;
                          end;
                        LogThis('<< Выполнение операции составления списка пользователей завершено.', LogGroupGUID, lmtInfo);
                        StepProgressBar(ProgressBar1); // 5

                        // разблокирование таблиц
                        if not bError then
                          begin
                            MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                            StepProgressBar(ProgressBar1); // 6
                          end;
                      end;
                  end
                else
                  begin
                    slUserList.AddStrings(aSelectedUserList);
                    StepProgressBar(ProgressBar1); // 4
                    StepProgressBar(ProgressBar1); // 5
                    StepProgressBar(ProgressBar1); // 6
                  end;

                // начало формирования текста HTML-файла
                if not bError then
                  begin
                    sReportCode:='СИЦ-04-'+GetConditionalMessage(bAllUsers, 'В', 'У')+'-'+GetConditionalMessage(bShowIdleUsers, 'А', 'Н')+'-'+GetConditionalMessage(bCreateDetailedReport, 'Р', 'С')+GetConditionalMessage
                      (bCreateDetailedReport and bShowSQLQueries, 'З', '')+'-'+GetConditionalMessage(bCreateDetailedReport, cReportSuffix, sReportSuffix);
                    sHTML:=sHTML+'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">'+#13#10;
                    sHTML:=sHTML+'<HTML>'+#13#10;
                    sHTML:=sHTML+'  <HEAD>'+#13#10;
                    sHTML:=sHTML+'    <TITLE>Статистика по работе пользователей АРМ услуги Отдых и развлечения за '+sReportPeriod+'</TITLE>'+#13#10;
                    sHTML:=sHTML+'    <META CONTENT="no-cache" HTTP-EQUIV="pragma">'+#13#10;
                    sHTML:=sHTML+'    <META CONTENT="no-cache" HTTP-EQUIV="cache-control">'+#13#10;
                    sHTML:=sHTML+'    <META CONTENT="Dynamic" NAME="Document-state">'+#13#10;
                    sHTML:=sHTML+'    <META content="text/html; charset=Windows-1251" http-equiv="Content-Type">'+#13#10;
                    sHTML:=sHTML+'    <STYLE MEDIA="screen, print" TYPE="text/css">'+#13#10;
                    sHTML:=sHTML+'      * {'+#13#10;
                    sHTML:=sHTML+'        font-family: Verdana, Arial, Helvetica, sans-serif;'+#13#10;
                    sHTML:=sHTML+'        font-size: 7pt;'+#13#10;
                    sHTML:=sHTML+'        padding: 0;'+#13#10;
                    sHTML:=sHTML+'        margin: 0;'+#13#10;
                    sHTML:=sHTML+'        border-color: transparent;'+#13#10;
                    sHTML:=sHTML+'        border-width: 0;'+#13#10;
                    sHTML:=sHTML+'        }'+#13#10;
                    sHTML:=sHTML+'      TABLE, TD {'+#13#10;
                    sHTML:=sHTML+'        border-style: solid;'+#13#10;
                    sHTML:=sHTML+'      }'+#13#10;
                    sHTML:=sHTML+'    </STYLE>'+#13#10;
                    sHTML:=sHTML+'  </HEAD>'+#13#10;
                    sHTML:=sHTML+'  <BODY>'+#13#10;
                    sHTML:=sHTML+'    <CENTER>'+#13#10;
                    sHTML:=sHTML+'    <TABLE ALIGN="CENTER" BORDER="1" BGCOLOR="WHITE" WIDTH="656" STYLE="border-color: white; border-width: 0; table-layout: fixed; empty-cells: show; float: none; clear: both; border-collapse: collapse;">'+#13#10;
                    sHTML:=sHTML+'      <TBODY VALIGN="MIDDLE" STYLE="border-color: white; border-width: 0;">'+#13#10;
                    sHTML:=sHTML+'        <TR>'+#13#10;
                    sHTML:=sHTML+'          <TD HEIGHT="1px" WIDTH="'+GetConditionalMessage(bCreateDetailedReport, '100', '196')+'px" STYLE="border-color: white; border-width: 0;"></TD>'+#13#10;
                    sHTML:=sHTML+'          <TD HEIGHT="1px" WIDTH="'+GetConditionalMessage(bCreateDetailedReport, '100', '115')+'px" STYLE="border-color: white; border-width: 0;"></TD>'+#13#10;
                    sHTML:=sHTML+'          <TD HEIGHT="1px" WIDTH="'+GetConditionalMessage(bCreateDetailedReport, '100', '115')+'px" STYLE="border-color: white; border-width: 0;"></TD>'+#13#10;
                    sHTML:=sHTML+'          <TD HEIGHT="1px" WIDTH="'+GetConditionalMessage(bCreateDetailedReport, '*', '115px')+'" STYLE="border-color: white; border-width: 0;"></TD>'+#13#10;
                    if not bCreateDetailedReport then
                      sHTML:=sHTML+'          <TD HEIGHT="1px" WIDTH="115px" STYLE="border-color: white; border-width: 0;"></TD>'+#13#10;
                    sHTML:=sHTML+'        </TR>'+#13#10;
                    sHTML:=sHTML+'        <TR>'+#13#10;
                    sHTML:=sHTML+
                      '          <TD COLSPAN="3" STYLE="border-bottom-color: #CCCCCC; border-top-color: white; border-left-color: white; font-weight: bold; border-right-color: white; border-width: 0px 0px 1px 0px; font-size: 10pt; text-align: left;">Форма № '
                      +sReportCode+'</TD>'+#13#10;
                    sHTML:=sHTML+'          <TD '+GetConditionalMessage(bCreateDetailedReport, '', 'COLSPAN="2" ')+
                      'STYLE="border-bottom-color: #CCCCCC; border-top-color: white; border-left-color: white; border-right-color: white; border-width: 0px 0px 1px 0px; font-size: 7pt; text-align: right;">'+
                      'Справочно-информационный цех<BR>филиала &laquo;Минская городская телефонная сеть&raquo;<BR>РУП &laquo;Белтелеком&raquo;</TD>'+#13#10;
                    sHTML:=sHTML+'        </TR>'+#13#10;
                    sHTML:=sHTML+'        <TR>'+#13#10;
                    sHTML:=sHTML+'          <TD COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+
                      '" STYLE="border-color: white; border-width: 0; text-align: center; font-size: 13pt; font-weight: bold; padding: 20px 0px 3px 0px;">Статистика по работе пользователей<BR>АРМ услуги &laquo;Отдых и развлечения&raquo;<BR>за '+
                      sReportPeriod+'</TD>'+#13#10;
                    sHTML:=sHTML+'        </TR>'+#13#10;

                    if bCreateDetailedReport then
                      begin
                        // блокирование таблиц
                        MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._usr READ, '+Configuration.RNE4Server.sMySQLDatabase+'._evn READ');
                        StepProgressBar(ProgressBar1); // 7

                        if not bError then
                          begin
                            // Создание временной таблицы
                            q:='CREATE TEMPORARY TABLE '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 (' //
                              +'PRIMARY KEY (evn_id), ' //
                              +'KEY evn_datetime (evn_datetime), ' //
                              +'KEY evn_type (evn_type), ' //
                              +'KEY evn_by_user_id (evn_by_user_id), ' //
                              +'KEY evn_object (evn_object), ' //
                              +'KEY evn_object_id (evn_object_id)' //
                              +') TYPE=MyISAM ' //
                              +'SELECT evn_id, evn_datetime, evn_type, evn_object, evn_object_id, evn_by_user_id, evn_details ' //
                              +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'._evn ' //
                              +'LEFT JOIN '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                              +'ON usr_id=evn_by_user_id ' //
                              +'WHERE DATE_FORMAT(evn_datetime,"%Y-%m-%d") ' //
                              +'BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'"'+' ' //
                              +'AND usr_fullname IN('; //
                            for iRoutineCounter:=0 to slUserList.Count-1 do
                              begin
                                q:=q+'"'+slUserList[iRoutineCounter]+'"';
                                if iRoutineCounter<slUserList.Count-1 then
                                  q:=q+', ';
                              end;
                            q:=q+');';
                            MySQL_CreateTable(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, q);
                            StepProgressBar(ProgressBar1); // 8

                            if not bError then
                              begin
                                // разблокирование таблиц
                                MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                                StepProgressBar(ProgressBar1); // 9

                                if not bError then
                                  begin
                                    // блокирование таблицы
                                    MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._usr READ');
                                    StepProgressBar(ProgressBar1); // 10

                                    if not bError then
                                      begin
                                        // получение данных из временной таблицы и формирование отчёта
                                        for iRoutineCounter:=0 to slUserList.Count-1 do
                                          if bError then
                                            Break
                                          else
                                            begin
                                              LogThis('>> Выполняется операция получения подробных данных о действиях пользователя и формирование строк отчёта...', LogGroupGUID, lmtInfo);
                                              if not Configuration.RNE4Server.bConnected then
                                                GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
                                              else
                                                begin
                                                  if mysql_ping(Configuration.RNE4Server.hConnection)<>0 then
                                                    GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
                                                  else
                                                    begin
                                                      q:='SELECT DATE_FORMAT(evn_datetime,"%d.%m.%Y"), DATE_FORMAT(evn_datetime,"%T"), evn_type, evn_object, evn_object_id, evn_details ' //
                                                        +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 ' //
                                                        +'LEFT JOIN '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                                                        +'ON usr_id=evn_by_user_id ' //
                                                        +'WHERE usr_fullname="'+slUserList[iRoutineCounter]+'" ' //
                                                        +'AND DATE_FORMAT(evn_datetime,"%Y-%m-%d") ' //
                                                        +'BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'" ' //
                                                        +'ORDER BY evn_datetime;'; //
                                                      LogThis(q, LogGroupGUID, lmtSQL);
                                                      if mysql_real_query(Configuration.RNE4Server.hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
                                                        GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
                                                      else
                                                        begin
                                                          LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
                                                          ResultSet:=mysql_store_result(Configuration.RNE4Server.hConnection);
                                                          if ResultSet=nil then
                                                            GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', sErrorMessage, bError)
                                                          else
                                                            begin
                                                              LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
                                                              iRowQuantity:=mysql_num_rows(ResultSet);
                                                              LogThis('Количество строк выборки равно '+IntToStr(iRowQuantity)+'.', LogGroupGUID, lmtInfo);
                                                              if iRowQuantity<0 then
                                                                GenerateError('Возникла ошибка при получении количества срок результирующей выборки!', sErrorMessage, bError)
                                                              else
                                                                begin
                                                                  LogThis('Количество строк выборки соответствует требуемому.', LogGroupGUID, lmtInfo);
                                                                  if (iRowQuantity>0)or bShowIdleUsers then
                                                                    begin
                                                                      bAnyReportDataExists:=True;
                                                                      sHTML:=sHTML+'        <TR>'+#13#10;
                                                                      sHTML:=sHTML+'          <TD COLSPAN="4" STYLE="border-color: white; border-width: 0; text-align: left; font-weight: bold; font-size: 10pt; padding: 20px 0px 3px 0px;">' //
                                                                        +Trim(slUserList[iRoutineCounter])+':</TD>'+#13#10; //
                                                                      sHTML:=sHTML+'        </TR>'+#13#10;
                                                                    end;
                                                                  if iRowQuantity>0 then
                                                                    begin
                                                                      sHTML:=sHTML+'        <TR>'+#13#10;
                                                                      sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 2px; border-color: black; font-weight: bold; padding: 2px;">Дата</TD>'+#13#10;
                                                                      sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Время</TD>'+#13#10;
                                                                      sHTML:=sHTML+'          <TD '+GetConditionalMessage(bShowSQLQueries, '', 'COLSPAN="2"')+
                                                                        'STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Действие</TD>'+#13#10;
                                                                      if bShowSQLQueries then
                                                                        sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Текст SQL-запроса</TD>'+#13#10;
                                                                      sHTML:=sHTML+'        </TR>'+#13#10;
                                                                      for iRowCounter:=0 to iRowQuantity-1 do
                                                                        if bError then
                                                                          Break
                                                                        else
                                                                          begin
                                                                            LogThis('Получение очередной строки выборки ('+IntToStr(iRowCounter)+').', LogGroupGUID, lmtInfo);
                                                                            ResultRow:=mysql_fetch_row(ResultSet);
                                                                            if ResultRow=nil then
                                                                              GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(iRowCounter)+')!', sErrorMessage, bError)
                                                                            else
                                                                              begin
                                                                                LogThis('Операция получения очередной строки выборки ('+IntToStr(iRowCounter)+') прошла успешно.', LogGroupGUID, lmtInfo);
                                                                                s:=string(ResultRow[2]);
                                                                                if s='INS' then
                                                                                  s:='Создание';
                                                                                if s='MOD' then
                                                                                  s:='Испраление';
                                                                                if s='DEL' then
                                                                                  s:='Удаление';
                                                                                if s='REC' then
                                                                                  s:='Восстановление';
                                                                                s:=s+GetConditionalMessage(string(ResultRow[3])>'', ' ', '') //
                                                                                  +GetConditionalMessage(StrToIntDef(string(ResultRow[4]), -1)=0, //
                                                                                  GetConditionalMessage(string(ResultRow[3])='msr', ' группы мероприятий', ''), //
                                                                                  GetConditionalMessage(string(ResultRow[3])='usr', ' пользователя', '') //
                                                                                    +GetConditionalMessage(string(ResultRow[3])='phn', ' телефона', '') //
                                                                                    +GetConditionalMessage(string(ResultRow[3])='msg', ' сообщения', '') //
                                                                                    +GetConditionalMessage(string(ResultRow[3])='org', ' организации', '') //
                                                                                    +GetConditionalMessage(string(ResultRow[3])='msr', ' мероприятия', '') //
                                                                                    +GetConditionalMessage(StrToIntDef(string(ResultRow[4]), -1)>-1, ' ID #'+string(ResultRow[4]), '')); //
                                                                                sHTML:=sHTML+'        <TR>'+#13#10;
                                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iRowCounter=(iRowQuantity-1), '2', '1')
                                                                                  +'px 2px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(string(ResultRow[0])='', '-', string(ResultRow[0]))+'</TD>'+#13#10;
                                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iRowCounter=(iRowQuantity-1), '2', '1')
                                                                                  +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(string(ResultRow[1])='', '-', string(ResultRow[1]))+'</TD>'+#13#10;
                                                                                sHTML:=sHTML+'          <TD '+GetConditionalMessage(bShowSQLQueries, '', 'COLSPAN="2"')+'STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage
                                                                                  (iRowCounter=(iRowQuantity-1), '2', '1')+'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(s='', '-', s)+'</TD>'+#13#10;
                                                                                if bShowSQLQueries then
                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align:   left; border-width: 0px 2px '+GetConditionalMessage(iRowCounter=(iRowQuantity-1), '2', '1')
                                                                                    +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(string(ResultRow[3])='', '-', string(ResultRow[5]))+'</TD>'+#13#10;
                                                                                sHTML:=sHTML+'        </TR>'+#13#10;
                                                                              end;
                                                                          end;
                                                                    end
                                                                  else
                                                                    if bShowIdleUsers then
                                                                      begin
                                                                        sHTML:=sHTML+'        <TR>'+#13#10;
                                                                        sHTML:=sHTML+
                                                                          '          <TD COLSPAN="4" STYLE="border-color: white; border-width: 0; text-align: left; padding: 0px;">Не найдено ни одного действия за данный период времени.</TD>'+#13#10;
                                                                        sHTML:=sHTML+'        </TR>'+#13#10;
                                                                      end;
                                                                end;
                                                              mysql_free_result(ResultSet);
                                                              LogThis('Освобождение ресурсов, занятых результатом выборки, выполнено.', LogGroupGUID, lmtInfo);
                                                            end;
                                                        end;
                                                    end;
                                                end;
                                              LogThis('<< Выполнение операции получения подробных данных о действиях пользователя и формирование строк отчёта завершено.', LogGroupGUID, lmtInfo);
                                            end;
                                        StepProgressBar(ProgressBar1); // 11

                                        // разблокирование таблиц
                                        if not bError then
                                          begin
                                            MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                                            StepProgressBar(ProgressBar1); // 12
                                            StepProgressBar(ProgressBar1); // 13
                                            StepProgressBar(ProgressBar1); // 14
                                          end;
                                      end;
                                  end;
                              end;
                          end;
                      end
                    else // !!! если отчёт свёрнутый
                      begin
                        // Создание временной таблицы
                        MySQL_CreateTable(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, //
                          'CREATE TEMPORARY TABLE '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 (' //
                            +'sort_id int(10) unsigned NOT NULL auto_increment, ' //
                            +'username varchar(100) default NULL, ' //
                            +'period varchar(100) default NULL, ' //
                            +'event_type enum("INS","MOD","DEL","REC") default NULL, ' //
                            +'quantity decimal(20,0) default NULL, ' //
                            +'PRIMARY KEY (sort_id)' //
                            +') TYPE=MyISAM;'); //
                        StepProgressBar(ProgressBar1); // 7

                        if not bError then
                          begin
                            // блокирование таблицы
                            MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._evn READ, '+Configuration.RNE4Server.sMySQLDatabase+'._usr READ');
                            StepProgressBar(ProgressBar1); // 8

                            if not bError then
                              begin
                                // Создание временной таблицы на основе структуры таблицы _evn
                                q:='CREATE TEMPORARY TABLE '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04_1 (' //
                                  +'PRIMARY KEY (evn_id), ' //
                                  +'KEY evn_datetime (evn_datetime), ' //
                                  +'KEY evn_type (evn_type), ' //
                                  +'KEY evn_by_user_id (evn_by_user_id), ' //
                                  +'KEY evn_object (evn_object), ' //
                                  +'KEY evn_object_id (evn_object_id)' //
                                  +') TYPE=MyISAM ' //
                                  +'SELECT evn_id, evn_datetime, evn_type, evn_object, evn_object_id, evn_by_user_id, evn_details ' //
                                  +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'._evn ' //
                                  +'LEFT JOIN '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                                  +'ON usr_id=evn_by_user_id ' //
                                  +'WHERE DATE_FORMAT(evn_datetime,"%Y-%m-%d") ' //
                                  +'BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'"'+' ' //
                                  +'AND usr_fullname IN('; //
                                for iRoutineCounter:=0 to slUserList.Count-1 do
                                  begin
                                    q:=q+'"'+slUserList[iRoutineCounter]+'"';
                                    if iRoutineCounter<slUserList.Count-1 then
                                      q:=q+', ';
                                  end;
                                q:=q+');';
                                MySQL_CreateTable(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, q);
                                StepProgressBar(ProgressBar1); // 9

                                if not bError then
                                  begin
                                    // разблокирование таблиц
                                    MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                                    StepProgressBar(ProgressBar1); // 10

                                    // вставка данных во временную таблицу
                                    if not bError then
                                      begin
                                        if aGroupByPeriod=gbpWeeks then
                                          begin
                                            // блокирование таблиц
                                            MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._usr READ');
                                            StepProgressBar(ProgressBar1); // 11

                                            if not bError then
                                              begin
                                                // получение списка недель
                                                slWeeksList:=GetWeeksList(aStartDate, aStopDate, bCalculateWeekFromMonday);
                                                if slWeeksList<>nil then
                                                  try
                                                    // циклическое получение данных по неделям
                                                    for iWeekCounter:=0 to slWeeksList.Count-1 do
                                                      if bError then
                                                        Break
                                                      else
                                                        begin
                                                          // Вставка данных в таблицу
                                                          q:='INSERT INTO '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 ' //
                                                            +'SELECT "", usr_fullname, "'+slWeeksList[iWeekCounter]+'" AS period, evn_type, COUNT(*) ' //
                                                            +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04_1 ' //
                                                            +'LEFT JOIN '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                                                            +'ON usr_id=evn_by_user_id ' //
                                                            +'WHERE DATE_FORMAT(evn_datetime,"%Y.%m.%d") ' //
                                                            +'BETWEEN'+' "'+FormatDateTime('yyyy.mm.dd', StrToDate(Copy(slWeeksList[iWeekCounter], 0, 10)))+'" ' //
                                                            +'AND "'+FormatDateTime('yyyy.mm.dd', StrToDate(Copy(slWeeksList[iWeekCounter], 14, 10)))+'" ' //
                                                            +'AND usr_fullname IN('; //
                                                          for iRoutineCounter:=0 to slUserList.Count-1 do
                                                            begin
                                                              q:=q+'"'+slUserList[iRoutineCounter]+'"';
                                                              if iRoutineCounter<slUserList.Count-1 then
                                                                q:=q+', ';
                                                            end;
                                                          q:=q+') GROUP BY usr_fullname, evn_type, period ORDER BY evn_datetime;';
                                                          MySQL_InsertRecords(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, q); //
                                                        end;
                                                  finally
                                                    slWeeksList.Free;
                                                  end
                                                else
                                                  GenerateError('Возникла ошибка при получении списка недель, входяших в выбранный период времени!', sErrorMessage, bError);
                                                StepProgressBar(ProgressBar1); // 12

                                                // разблокирование таблиц
                                                if not bError then
                                                  begin
                                                    MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                                                    StepProgressBar(ProgressBar1); // 13
                                                  end;
                                              end;
                                          end
                                        else // !!! если группировка любая кроме недельной
                                          begin
                                            // блокирование таблиц
                                            MySQL_LockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, Configuration.RNE4Server.sMySQLDatabase+'._usr READ, '+Configuration.RNE4Server.sMySQLDatabase+'._evn READ');
                                            StepProgressBar(ProgressBar1); // 11

                                            if not bError then
                                              begin
                                                // Вставка данных в таблицу
                                                q:='INSERT INTO '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 ' //
                                                  +'SELECT "", usr_fullname, '+sPeriodColumnQuery+' AS period, evn_type, COUNT(*) ' //
                                                  +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'._evn ' //
                                                  +'LEFT JOIN '+Configuration.RNE4Server.sMySQLDatabase+'._usr ' //
                                                  +'ON usr_id=evn_by_user_id ' //
                                                  +'WHERE DATE_FORMAT(evn_datetime,"%Y-%m-%d") ' //
                                                  +'BETWEEN "'+sSQLFormatStartDate+'" AND "'+sSQLFormatStopDate+'"'+' ' //
                                                  +'AND usr_fullname IN('; //
                                                for iRoutineCounter:=0 to slUserList.Count-1 do
                                                  begin
                                                    q:=q+'"'+slUserList[iRoutineCounter]+'"';
                                                    if iRoutineCounter<slUserList.Count-1 then
                                                      q:=q+', ';
                                                  end;
                                                q:=q+') ' //
                                                  +'GROUP BY usr_fullname, evn_type, '+sGroupByQuery+' ' //
                                                  +'ORDER BY evn_datetime;'; //
                                                MySQL_InsertRecords(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage, q);
                                                StepProgressBar(ProgressBar1); // 12

                                                // разблокирование таблиц
                                                if not bError then
                                                  begin
                                                    MySQL_UnlockTables(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
                                                    StepProgressBar(ProgressBar1); // 13
                                                  end;
                                              end;
                                          end;

                                        // перебор всех ползователей
                                        if not bError then
                                          begin
                                            for iRoutineCounter:=0 to slUserList.Count-1 do
                                              if bError then
                                                Break
                                              else
                                                begin
                                                  iQuantityCreated_UserSummary:=0;
                                                  iQuantityModified_UserSummary:=0;
                                                  iQuantityDeleted_UserSummary:=0;
                                                  iQuantityRecoveried_UserSummary:=0;
                                                  slPeriodList:=TStringList.Create;
                                                  try
                                                    // получение списка уникальных элементов колонки "период" для очередного пользователя
                                                    LogThis('>> Выполняется операция составления списка уникальных элементов колонки периода времени для очередного пользователя...', LogGroupGUID, lmtInfo);
                                                    if not Configuration.RNE4Server.bConnected then
                                                      GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
                                                    else
                                                      begin
                                                        if mysql_ping(Configuration.RNE4Server.hConnection)<>0 then
                                                          GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
                                                        else
                                                          begin
                                                            q:='SELECT DISTINCT period ' //
                                                              +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 ' //
                                                              +'WHERE username="'+slUserList[iRoutineCounter]+'" ' //
                                                              +'ORDER BY sort_id;'; //
                                                            LogThis(q, LogGroupGUID, lmtSQL);
                                                            if mysql_real_query(Configuration.RNE4Server.hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
                                                              GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
                                                            else
                                                              begin
                                                                LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
                                                                ResultSet:=mysql_store_result(Configuration.RNE4Server.hConnection);
                                                                if ResultSet=nil then
                                                                  GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', sErrorMessage, bError)
                                                                else
                                                                  begin
                                                                    LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
                                                                    iRowQuantity:=mysql_num_rows(ResultSet);
                                                                    LogThis('Количество строк выборки равно '+IntToStr(iRowQuantity)+'.', LogGroupGUID, lmtInfo);
                                                                    if iRowQuantity<0 then
                                                                      GenerateError('Возникла ошибка при получении количества срок результирующей выборки!', sErrorMessage, bError)
                                                                    else
                                                                      begin
                                                                        LogThis('Количество строк выборки соответствует требуемому.', LogGroupGUID, lmtInfo);
                                                                        for iRowCounter:=0 to iRowQuantity-1 do
                                                                          if bError then
                                                                            Break
                                                                          else
                                                                            begin
                                                                              LogThis('Получение очередной строки выборки ('+IntToStr(iRowCounter)+').', LogGroupGUID, lmtInfo);
                                                                              ResultRow:=mysql_fetch_row(ResultSet);
                                                                              if ResultRow=nil then
                                                                                GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(iRowCounter)+')!', sErrorMessage, bError)
                                                                              else
                                                                                begin
                                                                                  LogThis('Операция получения очередной строки выборки ('+IntToStr(iRowCounter)+') прошла успешно.', LogGroupGUID, lmtInfo);
                                                                                  slPeriodList.Add(string(ResultRow[0]));
                                                                                end;
                                                                            end;
                                                                      end;
                                                                    mysql_free_result(ResultSet);
                                                                    LogThis('Освобождение ресурсов, занятых результатом выборки, выполнено.', LogGroupGUID, lmtInfo);
                                                                  end;
                                                              end;
                                                          end;
                                                      end;
                                                    LogThis('<< Выполнение операции составления списка уникальных элементов колонки периода времени для очередного пользователя завершено.', LogGroupGUID, lmtInfo);

                                                    if not bError then
                                                      begin
                                                        if (slPeriodList.Count>0)or bShowIdleUsers then
                                                          begin
                                                            bAnyReportDataExists:=True;
                                                            sHTML:=sHTML+'        <TR>'+#13#10;
                                                            sHTML:=sHTML+'          <TD COLSPAN="5" STYLE="border-color: white; border-width: 0; text-align: left; font-weight: bold; font-size: 10pt; padding: 20px 0px 3px 0px;">'+Trim
                                                              (slUserList[iRoutineCounter])+':</TD>'+#13#10;
                                                            sHTML:=sHTML+'        </TR>'+#13#10;
                                                            if slPeriodList.Count>0 then
                                                              begin
                                                                sHTML:=sHTML+'        <TR>'+#13#10;
                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 2px; border-color: black; font-weight: bold; padding: 2px;">Период'+sPeriodColumn+'</TD>'+#13#10;
                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Создано</TD>'+#13#10;
                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Исправлено</TD>'+#13#10;
                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Удалено</TD>'+#13#10;
                                                                sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 2px 2px 2px 0px; border-color: black; font-weight: bold; padding: 2px;">Восстановлено</TD>'+#13#10;
                                                                sHTML:=sHTML+'        </TR>'+#13#10;
                                                                // перебор строк периода и получение количества дейтвий каждого типа за данный период
                                                                for iPeriodCounter:=0 to slPeriodList.Count-1 do
                                                                  if bError then
                                                                    Break
                                                                  else
                                                                    begin
                                                                      LogThis('>> Выполняется операция получения количества операций очередного пользователя...', LogGroupGUID, lmtInfo);
                                                                      if not Configuration.RNE4Server.bConnected then
                                                                        GenerateError('Для выполнения операции необходимо подключение к серверу MySQL!', sErrorMessage, bError)
                                                                      else
                                                                        begin
                                                                          if mysql_ping(Configuration.RNE4Server.hConnection)<>0 then
                                                                            GenerateError('Возникла ошибка при попытке проверки подключения к серверу MySQL!', sErrorMessage, bError)
                                                                          else
                                                                            begin
                                                                              q:='SELECT username, period, event_type, quantity ' //
                                                                                +'FROM '+Configuration.RNE4Server.sMySQLDatabase+'.tmp_04 ' //
                                                                                +'WHERE username="'+slUserList[iRoutineCounter]+'" ' //
                                                                                +'AND period="'+slPeriodList[iPeriodCounter]+'" ' //
                                                                                +'ORDER BY event_type;'; //
                                                                              LogThis(q, LogGroupGUID, lmtSQL);
                                                                              if mysql_real_query(Configuration.RNE4Server.hConnection, PAnsiChar(AnsiString(q)), Length(q))<>0 then
                                                                                GenerateError('Возникла ошибка при выполнении последнего SQL-запроса!', sErrorMessage, bError)
                                                                              else
                                                                                begin
                                                                                  LogThis('Запрос выполнен успешно.', LogGroupGUID, lmtInfo);
                                                                                  ResultSet:=mysql_store_result(Configuration.RNE4Server.hConnection);
                                                                                  if ResultSet=nil then
                                                                                    GenerateError('Не удалось получить результирующую выборку по последнему SQL-запросу!', sErrorMessage, bError)
                                                                                  else
                                                                                    begin
                                                                                      LogThis('Результирующая выборка получена успешно.', LogGroupGUID, lmtInfo);
                                                                                      iRowQuantity:=mysql_num_rows(ResultSet);
                                                                                      LogThis('Количество строк выборки равно '+IntToStr(iRowQuantity)+'.', LogGroupGUID, lmtInfo);
                                                                                      if iRowQuantity<0 then
                                                                                        GenerateError('Возникла ошибка при получении количества срок результирующей выборки!', sErrorMessage, bError)
                                                                                      else
                                                                                        begin
                                                                                          LogThis('Количество строк выборки соответствует требуемому.', LogGroupGUID, lmtInfo);
                                                                                          if iRowQuantity>0 then
                                                                                            begin
                                                                                              iQuantityCreated:=0;
                                                                                              iQuantityModified:=0;
                                                                                              iQuantityDeleted:=0;
                                                                                              iQuantityRecoveried:=0;
                                                                                              for iRowCounter:=0 to iRowQuantity-1 do
                                                                                                if bError then
                                                                                                  Break
                                                                                                else
                                                                                                  begin
                                                                                                    LogThis('Получение очередной строки выборки ('+IntToStr(iRowCounter)+').', LogGroupGUID, lmtInfo);
                                                                                                    ResultRow:=mysql_fetch_row(ResultSet);
                                                                                                    if ResultRow=nil then
                                                                                                      GenerateError('Возникла ошибка при загрузке данных строки выборки (порядковый номер строки равен '+IntToStr(iRowCounter)+')!', sErrorMessage,
                                                                                                        bError)
                                                                                                    else
                                                                                                      begin
                                                                                                        LogThis('Операция получения очередной строки выборки ('+IntToStr(iRowCounter)+') прошла успешно.', LogGroupGUID, lmtInfo);
                                                                                                        s:=string(ResultRow[2]);
                                                                                                        if s='INS' then
                                                                                                          iQuantityCreated:=StrToIntDef(string(ResultRow[3]), 0);
                                                                                                        if s='MOD' then
                                                                                                          iQuantityModified:=StrToIntDef(string(ResultRow[3]), 0);
                                                                                                        if s='DEL' then
                                                                                                          iQuantityDeleted:=StrToIntDef(string(ResultRow[3]), 0);
                                                                                                        if s='REC' then
                                                                                                          iQuantityRecoveried:=StrToIntDef(string(ResultRow[3]), 0);
                                                                                                      end;
                                                                                                  end;
                                                                                              if not bError then
                                                                                                begin
                                                                                                  // формирование строки
                                                                                                  iQuantityCreated_UserSummary:=iQuantityCreated_UserSummary+iQuantityCreated;
                                                                                                  iQuantityModified_UserSummary:=iQuantityModified_UserSummary+iQuantityModified;
                                                                                                  iQuantityDeleted_UserSummary:=iQuantityDeleted_UserSummary+iQuantityDeleted;
                                                                                                  iQuantityRecoveried_UserSummary:=iQuantityRecoveried_UserSummary+iQuantityRecoveried;
                                                                                                  sHTML:=sHTML+'        <TR>'+#13#10;
                                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iPeriodCounter=(slPeriodList.Count-1), '2', '1')
                                                                                                    +'px 2px; border-color: black; padding: 1px 2px;">'+slPeriodList[iPeriodCounter]+'</TD>'+#13#10;
                                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iPeriodCounter=(slPeriodList.Count-1), '2', '1')
                                                                                                    +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(iQuantityCreated=0, '-', IntToStr(iQuantityCreated))+'</TD>'+#13#10;
                                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iPeriodCounter=(slPeriodList.Count-1), '2', '1')
                                                                                                    +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(iQuantityModified=0, '-', IntToStr(iQuantityModified))+'</TD>'+#13#10;
                                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iPeriodCounter=(slPeriodList.Count-1), '2', '1')
                                                                                                    +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(iQuantityDeleted=0, '-', IntToStr(iQuantityDeleted))+'</TD>'+#13#10;
                                                                                                  sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px '+GetConditionalMessage(iPeriodCounter=(slPeriodList.Count-1), '2', '1')
                                                                                                    +'px 0px; border-color: black; padding: 1px 2px;">'+GetConditionalMessage(iQuantityRecoveried=0, '-', IntToStr(iQuantityRecoveried))+'</TD>'+#13#10;
                                                                                                  sHTML:=sHTML+'        </TR>'+#13#10;
                                                                                                end;
                                                                                            end;
                                                                                        end;
                                                                                      mysql_free_result(ResultSet);
                                                                                      LogThis('Освобождение ресурсов, занятых результатом выборки, выполнено.', LogGroupGUID, lmtInfo);
                                                                                    end;
                                                                                end;
                                                                            end;
                                                                        end;
                                                                      LogThis('<< Выполнение операции получения количества операций очередного пользователя завершено.', LogGroupGUID, lmtInfo);
                                                                    end;
                                                                // добавление итоговой строки
                                                                if not bError then
                                                                  begin
                                                                    sHTML:=sHTML+'        <TR>'+#13#10;
                                                                    sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 2px; border-color: black; padding: 2px;">Итого:</TD>'+#13#10;
                                                                    sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; padding: 2px;">'+GetConditionalMessage(iQuantityCreated_UserSummary=0,
                                                                      '-', IntToStr(iQuantityCreated_UserSummary))+'</TD>'+#13#10;
                                                                    sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; padding: 2px;">'+GetConditionalMessage(iQuantityModified_UserSummary=0,
                                                                      '-', IntToStr(iQuantityModified_UserSummary))+'</TD>'+#13#10;
                                                                    sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; padding: 2px;">'+GetConditionalMessage(iQuantityDeleted_UserSummary=0,
                                                                      '-', IntToStr(iQuantityDeleted_UserSummary))+'</TD>'+#13#10;
                                                                    sHTML:=sHTML+'          <TD STYLE="text-align: center; border-width: 0px 2px 2px 0px; border-color: black; padding: 2px;">'+GetConditionalMessage(iQuantityRecoveried_UserSummary=0,
                                                                      '-', IntToStr(iQuantityRecoveried_UserSummary))+'</TD>'+#13#10;
                                                                    sHTML:=sHTML+'        </TR>'+#13#10;
                                                                  end;
                                                              end
                                                            else
                                                              if bShowIdleUsers then
                                                                begin
                                                                  sHTML:=sHTML+'        <TR>'+#13#10;
                                                                  sHTML:=sHTML+'          <TD COLSPAN="5" STYLE="border-color: white; border-width: 0; text-align: left; padding: 0px;">Не найдено ни одного действия за данный период времени.</TD>'+
                                                                    #13#10;
                                                                  sHTML:=sHTML+'        </TR>'+#13#10;
                                                                end;
                                                          end;
                                                      end;
                                                  finally
                                                    slPeriodList.Free;
                                                  end;
                                                end;
                                            StepProgressBar(ProgressBar1); // 14
                                          end;
                                      end;
                                  end;
                              end;
                          end;

                      end;
                  end;
              finally
                slUserList.Free;
              end;
            end;
        end;

      // отключение от MySQL-сервера по окончанию работы текущей процедуры с базами данных - даже в случае ошибки
      MySQL_CloseConnection(LogGroupGUID, Configuration.RNE4Server, bError, sErrorMessage);
      StepProgressBar(ProgressBar1); // 15

      if not bError then
        begin
          // если не было выведено никаких табличных данных - выводим строку об отсутствии данных в БД
          if not bAnyReportDataExists then
            begin
              sHTML:=sHTML+'        <TR>'+#13#10;
              sHTML:=sHTML+'          <TD COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+
                '" STYLE="border-color: white; border-width: 0px; text-align: left; font-size: 10pt; padding: 20px 0px 3px 0px;">Данные за указанный период времени отсутствуют.</TD>'+#13#10;
              sHTML:=sHTML+'        </TR>'+#13#10;
            end;
          sHTML:=sHTML+'        <TR>'+#13#10;
          sHTML:=sHTML+'          <TD COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+'" STYLE="text-align: center; border-width: 0px; border-color: white; padding: 1px 2px;"></TD>'+#13#10;
          sHTML:=sHTML+'        </TR>'+#13#10;
          sHTML:=sHTML+'        <TR>'+#13#10;
          sHTML:=sHTML+'          <TD VALIGN="TOP" COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+'" STYLE="text-align: left; font-size: 7pt; border-color: white; border-width: 0; padding-top: 40px;">Исполнитель:<BR>'+
            CurrentUser.sPosition+'<BR>'+CurrentUser.sFullName+'<BR>'+CurrentUser.sContactPhone+'</TD>'+#13#10;
          sHTML:=sHTML+'        </TR>'+#13#10;
          sHTML:=sHTML+'        <TR>'+#13#10;
          sHTML:=sHTML+'           <TD COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+
            '" HEIGHT="20" STYLE="text-align: left; color: #EEEEEE; font-size: 5pt; border-color: white; border-width: 1px 0px 0px 0px; padding-top: 1px;"></TD>'+#13#10;
          sHTML:=sHTML+'        </TR>'+#13#10;
          sHTML:=sHTML+'        <TR>'+#13#10;
          dtNow:=Now;
          sHTML:=sHTML+'           <TD COLSPAN="'+GetConditionalMessage(bCreateDetailedReport, '4', '5')+
            '" STYLE="text-align: center; font-size: 5pt; border-bottom-color: white; border-top-color: #CCCCCC; border-left-color: white; border-right-color: white; border-width: 1px 0px 0px 0px; padding-top: 1px;">'+'Отчёт подготовлен '+IntToStr
            (DayOf(dtNow))+' '+saMonths2[MonthOf(dtNow)]+' '+IntToStr(YearOf(dtNow))+' года в '+FormatDateTime('hh:nn:ss', dtNow)
            +' при помощи программного комплекса &laquo;OVERSEER&raquo;, &copy;&nbsp;2009-2010&nbsp;by&nbsp;Vlad&nbsp;Ivanov</TD>'+#13#10;
          sHTML:=sHTML+'        </TR>'+#13#10;
          sHTML:=sHTML+'      </TBODY>'+#13#10;
          sHTML:=sHTML+'    </TABLE>'+#13#10;
          sHTML:=sHTML+'    </CENTER>'+#13#10;
          sHTML:=sHTML+'  </BODY>'+#13#10;
          sHTML:=sHTML+'</HTML>'+#13#10;
          LogThis(sHTML, LogGroupGUID, lmtInfo);
          StepProgressBar(ProgressBar1); // 16

          if not Do_SaveReportAsHTMLAndOpen(sHTML, 'Статистика по работе пользователей АРМ услуги Отдых и развлечения за '+sReportPeriod+' [форма № '+sReportCode+'].htm', aOpenWithBrowser, aSilentYes) then
            GenerateError('Произошла ошибка во вложенной функции сохранения и открытия отчёта!', sErrorMessage, bError);
        end;
    end;

  (*
  PreFooter(Handle, bError, sErrorMessage, LogGroupGUID);
  ProcedureFooter(LogGroupGUID);
  Do_SIC_04:=not bError;
  *)
end;


