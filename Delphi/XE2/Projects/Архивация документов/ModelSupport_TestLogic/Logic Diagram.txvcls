<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="oww14qca7pj_v">
    <property name="$metaclass" value="Class Diagram" />
    <property name="$name" value="Logic Diagram" />
    <reference referencedUin="delphi:e_class:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic">
      <property name="$shortcutReference" value="true" />
      <property name="bounds" value="0,0,287,188" />
      <property name="location_set_by_user" value="True" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.GetOnDisplayMessage()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.SetOnDisplayMessage(uTOnDisplayMessage.TOnDisplayMessage)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.OnDisplayMessage" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.DisplayInfoMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.DisplayErrorMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.DisplaySuccessMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.ClearMessage()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.GetQuery()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.Query" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.GetConnection()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.Connection" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uICustomBusinessLogic.ICustomBusinessLogic.CloseQuery()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic">
      <property name="$shortcutReference" value="true" />
      <property name="bounds" value="480,0,295,297" />
      <property name="location_set_by_user" value="True" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.FOnDisplayMessage" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.GetOnDisplayMessage()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.SetOnDisplayMessage(uTOnDisplayMessage.TOnDisplayMessage)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.OnDisplayMessage" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.FConnection" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.GetConnection()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.Connection" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.FQuery" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.GetQuery()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.Query" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.DisplayMessage(uTMessageType.TMessageType,System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.DisplayInfoMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.DisplayErrorMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.DisplaySuccessMessage(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.ClearMessage()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.CloseQuery()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.Create(Data.DB.TCustomConnection,uTOnDisplayMessage.TOnDisplayMessage)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic.Destroy()" />
      <reference referencedUin="delphi:l_impl:src:TestLogic:uTCustomBusinessLogic.TCustomBusinessLogic:uICustomBusinessLogic.ICustomBusinessLogic">
        <property name="sourceAnchor" value="480,94" />
        <property name="targetAnchor" value="287,94" />
        <property name="bendpoints" value="" />
      </reference>
    </reference>
    <reference referencedUin="delphi:e_class:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic">
      <property name="$shortcutReference" value="true" />
      <property name="bounds" value="480,340,430,793" />
      <property name="location_set_by_user" value="True" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.FCurrentUserId" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetCurrentUserId()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CurrentUserId" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.FArchiveBoxTypeId" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetArchiveBoxTypeId()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ArchiveBoxTypeId" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetBoxCapacity(System.Integer)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetBoxCapacity(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ClearControl(Vcl.Controls.TCustomControl)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetOpenedBoxQuantity(uIArchiveDocumentItem.IArchiveDocumentItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetOpenedBoxQuantity(System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.BoxIsFull(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetDocumentsCount(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.AnalizeBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.IsArchiveBoxBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.IsBSOBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.IsForceNewBoxCommandBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.IsPutBoxAsideCommandBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ShowCurrentBoxInfo()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ShowLastDocumentInfo()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.PutCurrentBoxAside()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.DeleteCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CurrentBoxIsFull()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.AcceptBSOByAcceptanceRegister(uICustomBSOItem.ICustomBSOItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ProcessBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.Create(Data.DB.TCustomConnection,System.Integer,System.Integer,uTOnDisplayMessage.TOnDisplayMessage)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetBSOItemByBarcode(System.string)" />
      <reference referencedUin="delphi:l_impl:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic">
        <property name="sourceAnchor" value="480,479" />
        <property name="targetAnchor" value="421,479" />
        <property name="bendpoints" value="" />
      </reference>
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ManualPrintCurrentBoxSticker()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.DeleteLastDocumentInCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GiveLastDocumentInCurrentBoxAway()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.ProcessString(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.Destroy()" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.FCurrentDocument" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetCurrentDocument()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.SetCurrentDocument(uIArchiveDocumentItem.IArchiveDocumentItem)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CurrentDocument" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.IsGiveLastDocumentAwayBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CreateDocumentItemByBarcode(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CreateArchiveBoxByDocument(uIArchiveDocumentItem.IArchiveDocumentItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.AddDocumentToCurrentBox(uIArchiveDocumentItem.IArchiveDocumentItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetNewArchiveBoxNumber(System.Integer,System.Integer,System.Integer)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.AddDocumentToOldestOpenedArchiveBox(uIArchiveDocumentItem.IArchiveDocumentItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.CanAddDocument()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic.GetCurrentBoxDocumentCount()" />
      <reference referencedUin="delphi:l_gnt:src:TestLogic:uTDocumentArchivingBusinessLogic.TDocumentArchivingBusinessLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic" />
    </reference>
    <reference referencedUin="delphi:e_class:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic">
      <property name="$shortcutReference" value="true" />
      <property name="bounds" value="0,340,421,188" />
      <property name="location_set_by_user" value="True" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.SetCurrentBox(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.CurrentBox" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetCurrentBoxInfoControl()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.SetCurrentBoxInfoControl(Vcl.Controls.TCustomControl)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.CurrentBoxInfoControl" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetLastDocumentInfoControl()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.SetLastDocumentInfoControl(Vcl.Controls.TCustomControl)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.LastDocumentInfoControl" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetCurrentUserId()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.CurrentUserId" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetArchiveBoxTypeId()" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ArchiveBoxTypeId" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ShowCurrentBoxInfo()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ShowLastDocumentInfo()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.PrintCurrentBoxSticker()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.PutCurrentBoxAside()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.CloseCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.DeleteCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.CurrentBoxIsFull()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.AcceptBSOByAcceptanceRegister(uICustomBSOItem.ICustomBSOItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ProcessBarcode(System.string)" />
      <reference referencedUin="delphi:l_gnt:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic:uICustomBusinessLogic.ICustomBusinessLogic">
        <property name="sourceAnchor" value="143,340" />
        <property name="targetAnchor" value="143,188" />
        <property name="bendpoints" value="" />
      </reference>
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ManualPrintCurrentBoxSticker()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.DeleteLastDocumentInCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.ProcessString(System.string)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uIDocumentArchivingBusinessLogic.IDocumentArchivingBusinessLogic.GetCurrentBoxDocumentCount()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic">
      <property name="$shortcutReference" value="true" />
      <property name="bounds" value="1062,167,404,67" />
      <reference referencedUin="delphi:l_gnt:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic:uTCustomBusinessLogic.TCustomBusinessLogic">
        <property name="sourceAnchor" value="1062,200" />
        <property name="targetAnchor" value="775,200" />
        <property name="bendpoints" value="" />
      </reference>
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.ReleaseBox(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.PutBoxAside(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.PrintBoxSticker(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.CloseBox(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.Show(Vcl.Controls.TCustomControl,uIShowable.IShowable)" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.UpdateCurrentInfo()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.CloseCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.PrintCurrentBoxSticker()" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.FCurrentBox" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.GetCurrentBox()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.SetCurrentBox(uIArchiveBoxItem.IArchiveBoxItem)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.CurrentBox" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.FCurrentBoxInfoControl" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.GetCurrentBoxInfoControl()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.SetCurrentBoxInfoControl(Vcl.Controls.TCustomControl)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.CurrentBoxInfoControl" />
      <reference referencedUin="delphi:e_field:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.FLastDocumentInfoControl" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.GetLastDocumentInfoControl()" />
      <reference referencedUin="delphi:e_method:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.SetLastDocumentInfoControl(Vcl.Controls.TCustomControl)" />
      <reference referencedUin="delphi:e_property:src:TestLogic:uTTestedDocumentArchivingLogic.TTestedDocumentArchivingLogic.LastDocumentInfoControl" />
    </reference>
  </view>
</nodeSet>